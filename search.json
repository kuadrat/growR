[{"path":"https://kuadrat.github.io/growR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 growR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kuadrat.github.io/growR/articles/calibration.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Calibration","text":"calibrate anything without reference data want identify ideal model parameters. purpose tutorial, going make use example data provided package. use data, sure adheres data file format outlined load_measured_data(). Furthermore, need everything ’s also required run simulation: weather input, parameter file , optionally, management data. Confer introductory tutorial details. , going use example data (though can feel free use ). ’ll use setup introductory tutorial: also already load example configuration. sake saving computation time example, limit simulation just one year. real-world situation, course make use calibration data available !","code":"working_dir = file.path(tempdir(), \"growR_calibration_tutorial\") dir.create(working_dir) setwd(working_dir) library(growR) #> +---------------------------------+ #> | Welcome to growR Version 1.2.0! | #> +---------------------------------+ setup_directory(working_dir, force = TRUE) #> [INFO]Initialized directory structure in `/tmp/RtmpZ1tKek/growR_calibration_tutorial`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_weather.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_parameters.csv` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management1.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management2.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_weather.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_parameters.csv` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management1.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management2.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux1.csv` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux2.csv` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens1.csv` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens2.csv` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/example_config.txt` to `/tmp/RtmpZ1tKek/growR_calibration_tutorial`. #> [INFO]Copied example files to respective directories. envs = read_config(\"example_config.txt\") # We only need one run environment. env = envs[[1]] # Save compuation time by considering only one year env$years = env$years[1]"},{"path":"https://kuadrat.github.io/growR/articles/calibration.html","id":"the-parameter-scan-loop","dir":"Articles","previous_headings":"","what":"The parameter scan loop","title":"Calibration","text":"essential approach finding optimized parameters given site run evaluate model many different sets parameters. comparing performance scores, can hone parameter combinations promising. evaluate model parameter sets, now regions parameter space suspect good performace. can keep seem find better parameter sets anymore satisfied (see -depth article much detailed description). three functions facilitate iterative procedure run_parameter_scan(), analyze_parameter_scan() plot_parameter_scan(). first makes easy carry model runs many different parameter sets. analyze_parameter_scan() takes output model runs compares set reference data assign performance scores run. Finally, plot_parameter_scan() visualizes performance scores function input parameters thus helps identify good regions parameter space.","code":""},{"path":"https://kuadrat.github.io/growR/articles/calibration.html","id":"running-a-parameter-scan","dir":"Articles","previous_headings":"The parameter scan loop","what":"Running a parameter scan","title":"Calibration","text":"can define parameter values interest input run_parameter_scan(). function automatically generate possible, valid combinations parameters run model given configuration parameter combinations. Given even relatively small parameter ranges can end number combinations order 100, step can become quite calculation intensive. Initially, absolutely prior knowledge parameters, consider parameters across full possible ranges. input run_parameter_scan() might thus look like : sure read documentation run_parameter_scan() detailed descriptions create_combinations() regarding sensible construction param_values. now ready go: might take time run store results binary format \"pscan_results0.rds\" well variable pscan_results.","code":"param_values = list(w_FGA = seq(0, 1, 0.25),                     w_FGB = seq(0, 1, 0.25),                     w_FGC = seq(0, 1, 0.25),                     w_FGD = seq(0, 1, 0.25),                     NI = seq(0.25, 1, 0.25)) pscan_results = run_parameter_scan(env, param_values,                                     outfilename = \"pscan_results0.rds\")"},{"path":"https://kuadrat.github.io/growR/articles/calibration.html","id":"analyzing-a-parameter-scan","dir":"Articles","previous_headings":"The parameter scan loop","what":"Analyzing a parameter scan","title":"Calibration","text":"order evaluate model outputs, need compare reference data. current setup, know corresponding data stored data/. Instead specifying path also loaded data passed data.frame argument analyze_parameter_scan(). Similarly, can use path binary file created previous call run_parameter_scan() just stored object variable. shouldn’t take long compute. can look output data.frame see well different combinations perform: much intuitive way, however, visualize results: create plot similar following: subplot combination scanned parameter used metric (bias, mean absolute error MAE root mean-squared error RMSE). subplot, point every evaluated parameter combination. plot_parameter_scan() puts small interactive command line interface (CLI), allows highlight different parameter combinations plot display numeric values console. Refer -line help (?) use little tool. plot can already make trends: (top right plot) NI clearly correlates bias. (plot) NI values 0.9 0.3 fail produce good (.e. close 0) bias. (NI column, bottom two rows) Similarly, NI values 0.3 0.9 lead large MAE RMSE. can pin ranges plausible NI values larger 0.3 smaller 0.9. (w_FGC w_FGD columns) Parameter combinations low amounts C D clearly score better large C D. (w_FGD column) can said B, effect less extreme. (w_FGA column) opposite trend visible . example narrow w_FGA larger 0.3, B greater 0.8 C D smaller 0.5. can now new parameter scan updated param_values, e.g. Since narrowed ranges, can afford increase resolution, .e. decrease step size parameters. Keep iterating process ’ve narrowed parameter ranges degree acceptable . exact choice parameters ranges examine , course, might require experimentation. might, example, make sense keep functional group weights unconstrained first pin NI. situations might able make use prior knowledge, e.g. measurement plant composition, gives hint towards functional groups prevalent. Refer -depth guide rigorous discussion.","code":"# Prepare path to reference data site = env$site_name print(site) #> [1] \"sorens1\" datafile = file.path(\"data\", sprintf(\"%s.csv\", site)) # Analyze! analyzed = analyze_parameter_scan(pscan_results, datafile) analyzed$results plot_parameter_scan(analyzed) param_values = list(w_FGA = seq(0.3, 1, 0.1),                     w_FGB = seq(0, 0.7, 0.1),                     w_FGC = seq(0, 0.3, 0.1),                     w_FGD = seq(0, 0.3, 0.1),                     NI = seq(0.5, 0.7, 0.05))"},{"path":"https://kuadrat.github.io/growR/articles/growR.html","id":"step-0-goal-of-the-tutorial","dir":"Articles","previous_headings":"","what":"Step 0: Goal of the tutorial","title":"Tutorial","text":"tutorial going make use example input reference datasets go whole process setting input files running ModVege simulations specified inputs look results change inputs run new simulation Since quite number input files required even get started growR, package ships example files . following tutorial, reader opportunity inspect can use templates order create simulations data. running simulations, data loaded written files. following, assume working empty directory filesystem working directory running R sessions Rscript commands. safe side, tutorial create temporary directory working_dir. necessary created files assumed located working directory.","code":"working_dir = file.path(tempdir(), \"growR_tutorial\") dir.create(working_dir) setwd(working_dir)"},{"path":"https://kuadrat.github.io/growR/articles/growR.html","id":"step-1-setting-up-all-input-files","dir":"Articles","previous_headings":"","what":"Step 1: Setting up all input files","title":"Tutorial","text":"help users somewhat clean directory structure, function setup_directory() provided. also offers option copy example files package directory appropriate location newly created directory structure. first step therefore execute following R session: used force = TRUE can skip safety prompt otherwise ask confirmation. Afterwards, check working directory. find couple subdirectories files: output generated output written , default input Inputs simulation, weather management data stored . data Experimentally measured, real world data comes . First, ’ll look example_config.txt. later going adjust make use file running simulation tutorial. contains information types simulation want run input files used simulation. look structure compare explanations given documentation read_config(). can infer, order completely run simulation, require least parameter weather data file (management file optional). growR comes example data two real-world experimental sites: Sorens Posieux, Switzerland. can find respective example parameter files input/sorens_parameters.csv input/posieux_parameters.csv. Likewise input/..._weather.txt input/..._management1/2.txt files. , look files respective descriptions WeatherData ManagementData familiarize required data structures meaning different columns.","code":"library(growR) #> +---------------------------------+ #> | Welcome to growR Version 1.2.0! | #> +---------------------------------+ # Check that working directory is correct print(working_dir) #> [1] \"/tmp/RtmpfqY7PP/growR_tutorial\" getwd() #> [1] \"/tmp/RtmpfqY7PP/growR_tutorial\" setup_directory(working_dir, force = TRUE) #> [INFO]Initialized directory structure in `/tmp/RtmpfqY7PP/growR_tutorial`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_weather.txt` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_parameters.csv` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management1.txt` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management2.txt` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_weather.txt` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_parameters.csv` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management1.txt` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management2.txt` to `/tmp/RtmpfqY7PP/growR_tutorial/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux1.csv` to `/tmp/RtmpfqY7PP/growR_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux2.csv` to `/tmp/RtmpfqY7PP/growR_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens1.csv` to `/tmp/RtmpfqY7PP/growR_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens2.csv` to `/tmp/RtmpfqY7PP/growR_tutorial/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/example_config.txt` to `/tmp/RtmpfqY7PP/growR_tutorial`. #> [INFO]Copied example files to respective directories."},{"path":"https://kuadrat.github.io/growR/articles/growR.html","id":"run-modvege-with-the-example-configuration","dir":"Articles","previous_headings":"","what":"2. Run ModVege with the example configuration","title":"Tutorial","text":"Everything now set us ready proceed simulation. Run: may already seen documentation read_config(), reads given configuration file, skipping lines starting #. line, looks given input files creates ModvegeEnvironment object data corresponding files. ModvegeEnvironments essentially data structures hold information needed order run ModVege simulation. now ready : simulate grass growth every year every environment present environments. console output, now results runs list results. Check documentation growR_run_loop() ro see list organized. Furthermore, default value write_files growR_run_loop() TRUE. means results also written files output directory.","code":"environments = read_config(\"example_config.txt\") results = growR_run_loop(environments,                           output_dir = file.path(working_dir, \"output\")) #> [INFO]Starting run 1 out of 2. #> [INFO][Run 1/2]Simulating year 2013 (1/3) #> [INFO][Run 1/2]Simulating year 2014 (2/3) #> [INFO][Run 1/2]Simulating year 2015 (3/3) #> [INFO]Starting run 2 out of 2. #> [INFO][Run 2/2]Simulating year 2013 (1/3) #> [INFO][Run 2/2]Simulating year 2014 (2/3) #> [INFO][Run 2/2]Simulating year 2015 (3/3) #> [INFO]All runs completed."},{"path":"https://kuadrat.github.io/growR/articles/growR.html","id":"have-a-look-at-the-results","dir":"Articles","previous_headings":"","what":"3. Have a look at the results","title":"Tutorial","text":"Since simulation results fingertips interactive R sessions, quickest way inspect results list. output might little overwhelming helpful, though. convenient way quickly see happened plot resulting grass growth curves. ModvegeSite objects actually ’s stored results provide simple means plot() method. example, see growth curves year 2013 site Sorens : blue vertical lines top left plot indicate cutting events. coincide steps harvested biomass hvBM, bottom right plot. Excellent! run first ModVege simulation growR!","code":"# Just print the first years of the first run (i.e. year 2013 at site Sorens) results[[1]][[1]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.425137788528002 0.4583695833186 0.514875174072729 0.59 ... #>     AgeDR: 502.41 502.7 502.7 505.98 510.39 512.89 512.89 514.12 51 ... #>     AgeDRp: 3059.75216179612 #>     AgeDV: 502.41 502.7 502.7 505.98 510.39 512.89 512.89 514.12 51 ... #>     AgeDVp: 386.16446805472 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2295.17765333274 #>     AgeGV: 102.41 102.7 102.7 105.98 110.39 112.89 112.89 114.12 11 ... #>     AgeGVp: 370.305479244779 #>     BM: 747.7587 747.490907997 747.490907997 744.464666239853 74 ... #>     BM_after_cut: 1070 #>     BMDR: 29.9277 29.919020967 29.919020967 29.8208865782282 29.68 ... #>     BMDRp: 0.500130124356253 #>     BMDV: 297.831 297.57188703 297.57188703 294.643779661625 290.7 ... #>     BMDVp: 282.480008175896 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 140 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 491.438768295548 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7844.84187034734 #>     clone: function (deep = FALSE)  #>     cut_delays: 0 #>     cut_DOYs: 106 134 162 190 218 246 274 302 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     days_per_year: 365 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     ENV: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 99 #>     LAI: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     LAIGV: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     OMD: 0.677537527475466 0.677569768025088 0.677569768025088 0. ... #>     OMDDR: 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4  ... #>     OMDDV: 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0 ... #>     OMDG: 0.858665597014925 0.858576865671642 0.858576865671642 0. ... #>     OMDGR: 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0 ... #>     OMDGV: 0.858665597014925 0.858576865671642 0.858576865671642 0. ... #>     parameters: ModvegeParameters, R6 #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     run: function (year, weather, management)  #>     run_name: - #>     SENGR: 0 #>     SENGV: 0 #>     set_parameters: function (params)  #>     site_name: sorens1 #>     ST: 2.41 2.7 2.7 5.98 10.39 12.89 12.89 14.12 14.12 14.93 16 ... #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     STp: 3005.38 #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     WR: 160 159.600913343104 159.873592083394 159.849885542053 1 ... #>     write_output: function (filename, force = FALSE)  #>     WRp: 159.800708876818 #>     year: 2013 #>   Private: #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     REP_ON: 0.653846153846154 #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list results[[1]][[1]]$plot()"},{"path":"https://kuadrat.github.io/growR/articles/growR.html","id":"change-inputs-and-run-a-different-simulation","dir":"Articles","previous_headings":"","what":"4. Change inputs and run a different simulation","title":"Tutorial","text":"Now, sake example, let’s say want check simulation look like sides significantly lower nutritional index NI. First, check current values NI differnet parameter files (input/sorens_parameters.csv input/posieux_parameters.csv). 0.7 sites. want investigate growth curves look like different values NI. purpose, ’ll focus site Sorens year 2013 (just keep calculations required example quick). One way supply different parameters simulation, providing different parameter files. Copy sorens_parameters.csv twice call copies something like sorens_parameters_lowNI.csv sorens_parameters_highNI.csv. one files, change value NI 0.5 , change 1.0. , copy example_config.txt file, give name choice (’ll use NI_screening.txt ) edit three uncommented lines. use site name sorens1 year 2013. One use original sorens_parameters.csv file others use newly written parameter files higher lower NI values respectively. Since now specify several runs site name, need distinguish giving least two distinct run name well. done, new config file might look something like : sure spelling file names correct consistent files reside correct locations (.e. input directory working directory). seems fine, go (use name config file chose): ’re ready run inspect next run simulations:    can see NI affects total biomass production: larger NI leads proportionally larger cBM hvBM end season.","code":"# site name     # run name  # year(s)   # param file            # weather data          # cut dates sorens1     -   2013    sorens_parameters.csv   sorens_weather.txt      sorens_management1.txt sorens1     lowNI   2013    sorens_parameters_lowNI.csv sorens_weather.txt      sorens_management1.txt sorens1     highNI      2013    sorens_parameters_highNI.csv    sorens_weather.txt      sorens_management1.txt new_envs = read_config(\"NI_screening.txt\") new_results = growR_run_loop(new_envs) #> [INFO]Starting run 1 out of 3. #> [INFO][Run 1/3]Simulating year 2013 (1/1) #> [INFO]Starting run 2 out of 3. #> [INFO][Run 2/3]Simulating year 2013 (1/1) #> [INFO]Starting run 3 out of 3. #> [INFO][Run 3/3]Simulating year 2013 (1/1) #> [INFO]All runs completed. # Plot all results for (run in new_results) {   print(run[[1]]$parameters$NI)   run[[1]]$plot() } #> [1] 0.7 #> [1] 0.5 #> [1] 1"},{"path":"https://kuadrat.github.io/growR/articles/parameter_descriptions.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Parameter Descriptions","text":"ModVege makes use sizable number different variables. used inputs simulation, tune model behaviour others actual state variables simulated grassland system. following section attempt provide comprehensive possible list . thorough understanding, reader referred original publication [@jouven2006ModelPredictingDynamics].","code":""},{"path":"https://kuadrat.github.io/growR/articles/parameter_descriptions.html","id":"state-variables","dir":"Articles","previous_headings":"Parameters","what":"State Variables","title":"Parameter Descriptions","text":"values evolve model run stored respective fields [ModvegeSite] instance run. BM Standing biomass kg DM per ha. BMG Standing green biomass (kg DM / ha). cBM Cumulativeley grown biomass (kg DM / ha). dBM Daily grown biomass (kg DM / ha). hvBM Cumulative harvested biomass (kg DM / ha). OMD Organic matter digestibility (kg / kg). OMDG OMD green matter (kg / kg). ST Temperature sum degree Celsius days. REP Reproductive function. Gives fraction growth assigned reproductive growth. remainder goes vegetative growth. Dimensionless. PGRO Potential growth kg DM / ha. GRO Effective growth kg DM / ha. LAI Leaf area index, accounting proportion light intercepted sward. Dimensionless. LAIGV LAI green vegetative biomass. Dimensionless. AET Actual evapotranspiration mm. WR Water reserves mm. ENV Function representing environmental effects growth. Acts multiplicative factor. Dimensionless. ENVfPAR Part ENV due strength incident radiation. Dimensionless. ENVfT Part ENV due temperature. Dimensionless. ENVfW Part ENV due water limitation. Dimensionless.","code":""},{"path":"https://kuadrat.github.io/growR/articles/parameter_descriptions.html","id":"initial-conditions","dir":"Articles","previous_headings":"Parameters","what":"Initial conditions","title":"Parameter Descriptions","text":"AgeGV Age green vegetative matter degree Celsius days. AgeGR Age green reproductive matter degree Celsius days. AgeDV Age dead vegetative matter degree Celsius days. AgeDR Age dead reproductive matter degree Celsius days. BMGV biomass GV (kg DM per ha). BMGR biomass GR (kg DM per ha). BMDV biomass DV (kg DM per ha). BMDR biomass DR (kg DM per ha). BMDR biomass DR (kg DM per ha). SENG senescence GV (kg DM per ha). SENG senescence GR (kg DM per ha). ABSG abscission DV (kg DM per ha). ABSG abscission DR (kg DM per ha). ST thermal time (degree days). cBM cumulative total biomass (kg per ha).","code":""},{"path":"https://kuadrat.github.io/growR/articles/parameter_descriptions.html","id":"model-parameters","dir":"Articles","previous_headings":"Parameters","what":"Model parameters","title":"Parameter Descriptions","text":"LON geographic longitude site degree. LAT geographic latitude site degree. ELV geographic elevation site m..s.l. WHC water-holding capacity site mm. NI site nutritional index (dimensionless). RUEmax maximum radiuation use efficiency g DM per MJ. w_FGA relative weight functional group . w_FGB relative weight functional group B. w_FGC relative weight functional group C. w_FGD relative weight functional group D. sigmaGV rate GV respirative biomass loss (dimensionless). sigmaGR rate GR respirative biomass loss (dimensionless). T0 photosynthesis activation temperature (degree C). T1 photosynthesis plateau temperature (degree C). T2 photosynthesis max temperature (degree C). KGV basic senescence rate GV (dimensionless). KGR basic senescence rate GR (dimensionless). KlGV basic abscission rate GV (dimensionless). KlGR basic abscission rate GR (dimensionless). maxOMDDV organic matter digestibility gram per gram DV. minOMDDR organic matter digestibility gram per gram DR. CO2_growth_factor strength effect CO2 concentration growth. See parameter b [fCO2_growth_mod()]. crop_coefficient multiplicative factor Kc reference evapotranspiration ET0 multiplied get crop evapotranspiration ETc: ETc = Kc ET0 senescence_cap fraction cs GRO SEN limited: SENimax = cs GROi GV, GR. Makes less likely grass population die . Can set large values order effectively disable senescence capping.","code":""},{"path":"https://kuadrat.github.io/growR/articles/parameter_descriptions.html","id":"functional-group-parameters","dir":"Articles","previous_headings":"Parameters","what":"Functional group parameters","title":"Parameter Descriptions","text":"SLA Specific Leaf Area m2 per g. pcLAM Percentage laminae (number 0 1). ST1 Temperature sum degree Celsiues days seasonality function SEA starts decrease maximum plateau. See also [SEA()]. ST2 Temperature sum degree Celsiues days seasonality function SEA decreased back minimum value. See also [SEA()]. maxSEA Maximum value seasonality function [SEA()] minSEA Minimum value seasonality function [SEA()]. Usually, minSEA = 1 - (maxSEA - 1). maxOMDGV Maximum organic matter digestability green vegetative matter arbitrary units. minOMDGV Minimum organic matter digestability green vegetative matter arbitrary units. maxOMDGR Maximum organic matter digestability green reproductive matter arbitrary units. minOMDGR Minimum organic matter digestability green reproductive matter arbitrary units. BDGV Bulk density green vegetative dry matter g per m3. BDDV Bulk density dead vegetative dry matter g per m3. BDGR Bulk density green reproductive dry matter g per m3. BDDR Bulk density dead reproductive dry matter g per m3. fg_parameter_names Vector strings variable names vegetation parameters governed functional group composition.","code":""},{"path":"https://kuadrat.github.io/growR/articles/parameter_descriptions.html","id":"weather-variables","dir":"Articles","previous_headings":"Parameters","what":"Weather variables","title":"Parameter Descriptions","text":"DOY day year given year Ta average temperature given day (Celsius). precip precipitation millimeter per day. PAR photosynthetically active radiation MJ/m2. Can calculated average sunlight irradiance SRad J/s/m2 : PAR = SRad * 0.47 * 24 * 60 * 60 / 1e6 ET0 evapotranspiration mm.","code":""},{"path":"https://kuadrat.github.io/growR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Kramer. Author, maintainer, copyright holder.","code":""},{"path":"https://kuadrat.github.io/growR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kramer K (2024). growR: Implementation Vegetation Model ModVege. R package version 1.2.0, https://kuadrat.github.io/growR/, https://github.com/kuadrat/growR.","code":"@Manual{,   title = {growR: Implementation of the Vegetation Model ModVege},   author = {Kevin Kramer},   year = {2024},   note = {R package version 1.2.0, https://kuadrat.github.io/growR/},   url = {https://github.com/kuadrat/growR}, }"},{"path":"https://kuadrat.github.io/growR/index.html","id":"growr---r-implementation-of-the-grassland-model-modvege1","dir":"","previous_headings":"","what":"Implementation of the Vegetation Model ModVege","title":"Implementation of the Vegetation Model ModVege","text":"R implementation grassland model ModVege Jouven et al.2 based R implementation created Pierluigi Calanca3. implementation package contains additions cited version ModVege, simulations management decisions, influences snow cover. , model fit simulate grass growth mountainous regions, Swiss Alps. package also contains routines calibrating model helpful tools analysing model outputs performance.","code":""},{"path":"https://kuadrat.github.io/growR/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"Implementation of the Vegetation Model ModVege","text":"Installation Getting Started Contributing Contact Glossary Footnotes References","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/index.html","id":"from-cran","dir":"","previous_headings":"Installation","what":"From CRAN","title":"Implementation of the Vegetation Model ModVege","text":"preferred installation route users. R package can installed usual CRAN issuing following prompt R session:","code":"install.packages(\"growR\")"},{"path":"https://kuadrat.github.io/growR/index.html","id":"from-source","dir":"","previous_headings":"Installation","what":"From source","title":"Implementation of the Vegetation Model ModVege","text":"Installing source might make sense … intend making changes model4, want contribute package development maintenance, want get access cutting edge version, may changes yet available CRAN version also likely less stable, reason installation CRAN option . case, start cloning repository via https: create directory growR file system. don’t don’t want use git, alternatively copy source code .zip file github. Unzip contents directory growR.","code":"$ git clone git@github.com:kuadrat/growR.git $ git clone https://github.com/kuadrat/growR.git"},{"path":"https://kuadrat.github.io/growR/index.html","id":"alternative-a","dir":"","previous_headings":"Installation > From source","what":"Alternative A","title":"Implementation of the Vegetation Model ModVege","text":"can now install local version growR issuing following prompt R session: replace \"/full/path//\" actual path growR directory computer. Also, replace slashes (/) backslashe (\\) ’re Windows. growR now installed available R library(growR). make changes source files growR directory, just uninstall current version (issue remove.packages(\"growR\") R) repeat step.","code":"install.packages(\"/full/path/to/growR\", repos = NULL)"},{"path":"https://kuadrat.github.io/growR/index.html","id":"alternative-b","dir":"","previous_headings":"Installation > From source","what":"Alternative B","title":"Implementation of the Vegetation Model ModVege","text":"make frequent changes code, might unpractical uninstall reinstall changed version time. case, devtools comes handy (needed, install install.packages(\"devtools\")). allows load package active R session without need properly installed. following practically equivalent result method described alternative : notes \"/full/path/\" Alternative apply well.","code":"library(devtools) devtools::load_all(\"/full/path/to/growR\")"},{"path":"https://kuadrat.github.io/growR/index.html","id":"non-package-version","dir":"","previous_headings":"Installation","what":"Non-package version","title":"Implementation of the Vegetation Model ModVege","text":"just want focus using adjusting ModVege model feel structure R package hindrance help cause, third option. Simply use pre-R-package version growR, called rmodvege, essentially collection R scripts. users might familiar comfortable working manner instead working package code. Go https://github.com/kuadrat/rmodvege-scripts access script-based implementation ModVege. Note, however, script based version maintained might therefore lack functionality provided growR package.","code":""},{"path":"https://kuadrat.github.io/growR/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Implementation of the Vegetation Model ModVege","text":"package documentation hosted github pages: https://kuadrat.github.io/growR/. look find introductory tutorial, information well complete package reference. Alternatively (case github pages prefer offline solution), can find information Reference manual Vignettes CRAN package homepage: https://cran.r-project.org/web/packages/growR/index.html Finally, ’s also possible directly access package documentation vignettes R interpreter, using ? vignette() tools, e.g.","code":"> library(growR) # Get help on a function or object > ?growR_run_loop # some output...  # List available vignettes > vignette(package = \"growR\") Vignettes in package ‘growR’:  parameter_descriptions                           Parameter Descriptions (source, html) growR                   Tutorial (source, html)  # Inspect a vignette > vignette(\"growR\")"},{"path":"https://kuadrat.github.io/growR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Implementation of the Vegetation Model ModVege","text":"forms contributions project warmly welcome. invited : - provide direct feedback e-mail. - submit bug reports feature requests via github issues. - make changes additions code submit pull requests let contributions become part future versions. - suggest improvements write documentation tutorials. - reference work made use growR . intend collaborate regular ongoing manner, best get touch Kevin Kramer.","code":""},{"path":"https://kuadrat.github.io/growR/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Implementation of the Vegetation Model ModVege","text":"Kevin Kramer: kevin.pasqual.kramer@protonmail.ch","code":""},{"path":"https://kuadrat.github.io/growR/index.html","id":"glossary","dir":"","previous_headings":"","what":"Glossary","title":"Implementation of the Vegetation Model ModVege","text":"Terms used project growR Name project corresponding R package. shown capitalization adhered even used function object names code base. ModVege basis underlying grassland model implemented . naming convention objects overrides capitalization shown , model name referred function object names. rmodvege Early name project still name legacy project factored R package, rather collection R scripts. Still available, though unmaintained https://github.com/kuadrat/rmodvege-scripts/.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":null,"dir":"Reference","previous_headings":"","what":"Combinator — Combinator","title":"Combinator — Combinator","text":"Helps find possible combinations given set values.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Combinator — Combinator","text":"combinations list run, holds valid parameter combinations named lists. eps float Numerical precision require checking functional group weight sum criterion.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Combinator — Combinator","text":"Combinator$create_combinations() Combinator$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"method-create-combinations-","dir":"Reference","previous_headings":"","what":"Method create_combinations()","title":"Combinator — Combinator","text":"Find possible combinations","code":""},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combinator — Combinator","text":"","code":"Combinator$create_combinations(param_values)"},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combinator — Combinator","text":"param_values list giving options parameter values combined. example:   generate combinations eps Precision used checking sum citerion functional groups (w_FGA + w_FGB + w_FGC + w_FGD = 1) fulfilled.","code":"list(w_FGA = c(0, 0.5, 1), w_FGB = c(0, 0.5, 1), NI = c(0.5, 0.9))"},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Combinator — Combinator","text":"combinations list containing vectors parameter value combinations.","code":""},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Combinator — Combinator","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Combinator — Combinator","text":"","code":"Combinator$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/Combinator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combinator — Combinator","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FG_A.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional group A — FG_A","title":"Functional group A — FG_A","text":"Functional group ","code":""},{"path":"https://kuadrat.github.io/growR/reference/FG_A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional group A — FG_A","text":"","code":"FG_A"},{"path":"https://kuadrat.github.io/growR/reference/FG_A.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Functional group A — FG_A","text":"object class FunctionalGroup (inherits R6) length 23.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/FG_B.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional group B — FG_B","title":"Functional group B — FG_B","text":"Functional group B","code":""},{"path":"https://kuadrat.github.io/growR/reference/FG_B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional group B — FG_B","text":"","code":"FG_B"},{"path":"https://kuadrat.github.io/growR/reference/FG_B.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Functional group B — FG_B","text":"object class FunctionalGroup (inherits R6) length 23.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/FG_C.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional group C — FG_C","title":"Functional group C — FG_C","text":"Functional group C","code":""},{"path":"https://kuadrat.github.io/growR/reference/FG_C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional group C — FG_C","text":"","code":"FG_C"},{"path":"https://kuadrat.github.io/growR/reference/FG_C.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Functional group C — FG_C","text":"object class FunctionalGroup (inherits R6) length 23.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/FG_D.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional group D — FG_D","title":"Functional group D — FG_D","text":"Functional group D","code":""},{"path":"https://kuadrat.github.io/growR/reference/FG_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional group D — FG_D","text":"","code":"FG_D"},{"path":"https://kuadrat.github.io/growR/reference/FG_D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Functional group D — FG_D","text":"object class FunctionalGroup (inherits R6) length 23.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation of a grassland plant population — FunctionalGroup","title":"Representation of a grassland plant population — FunctionalGroup","text":"functional group representation grassland plant population certain functional attributes. contains many plant parameters collected hood functional groups. class implements S3 style operator overloading one can things like","code":"mixed_functional_group = 0.8 * FG_A + 0.2 * FG_B"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Representation of a grassland plant population — FunctionalGroup","text":"SLA Specific Leaf Area m^2^ per g. pcLAM Percentage laminae (number 0 1). ST1 Temperature sum degree Celsiues days seasonality function SEA starts decrease maximum plateau. See also SEA(). ST2 Temperature sum degree Celsiues days seasonality function SEA decreased back minimum value. See also SEA(). maxSEA Maximum value seasonality function SEA() minSEA Minimum value seasonality function SEA(). Usually, minSEA = 1 - (maxSEA - 1). maxOMDGV Maximum organic matter digestability green vegetative matter arbitrary units. minOMDGV Minimum organic matter digestability green vegetative matter arbitrary units. maxOMDGR Maximum organic matter digestability green reproductive matter arbitrary units. minOMDGR Minimum organic matter digestability green reproductive matter arbitrary units. BDGV Bulk density green vegetative dry matter g per m^3^. BDDV Bulk density dead vegetative dry matter g per m^3^. BDGR Bulk density green reproductive dry matter g per m^3^. BDDR Bulk density dead reproductive dry matter g per m^3^. fg_parameter_names Vector strings variable names vegetation parameters governed functional group composition. Default values parameters taken functional group Jouven et al.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Representation of a grassland plant population — FunctionalGroup","text":"Jouven M, Carrère P, Baumont R (2006). “Model Predicting Dynamics Biomass, Structure Digestibility Herbage Managed Permanent Pastures. 1. Model Description.” Grass Forage Science, 61(2), 112--124. ISSN 1365-2494, doi:10.1111/j.1365-2494.2006.00515.x , https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1365-2494.2006.00515.x.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"public-fields-1","dir":"Reference","previous_headings":"","what":"Public fields","title":"Representation of a grassland plant population — FunctionalGroup","text":"fg_parameter_names Names vegetation parameters governed functional group composition.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Representation of a grassland plant population — FunctionalGroup","text":"FunctionalGroup$new() FunctionalGroup$get_parameters() FunctionalGroup$get_parameters_ordered() FunctionalGroup$set_parameters() FunctionalGroup$set_parameters_ordered() FunctionalGroup$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Representation of a grassland plant population — FunctionalGroup","text":"Constructor","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of a grassland plant population — FunctionalGroup","text":"","code":"FunctionalGroup$new(...)"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of a grassland plant population — FunctionalGroup","text":"... Key-value pairs parameters set.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"method-get-parameters-","dir":"Reference","previous_headings":"","what":"Method get_parameters()","title":"Representation of a grassland plant population — FunctionalGroup","text":"Convenient getter Returns parameters names list.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of a grassland plant population — FunctionalGroup","text":"","code":"FunctionalGroup$get_parameters()"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"method-get-parameters-ordered-","dir":"Reference","previous_headings":"","what":"Method get_parameters_ordered()","title":"Representation of a grassland plant population — FunctionalGroup","text":"Ordered getter Returns parameters reproducible order vector.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of a grassland plant population — FunctionalGroup","text":"","code":"FunctionalGroup$get_parameters_ordered()"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"method-set-parameters-","dir":"Reference","previous_headings":"","what":"Method set_parameters()","title":"Representation of a grassland plant population — FunctionalGroup","text":"Convenient setter Set specified parameters.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of a grassland plant population — FunctionalGroup","text":"","code":"FunctionalGroup$set_parameters(...)"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of a grassland plant population — FunctionalGroup","text":"... Key-value pairs parameters set.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"method-set-parameters-ordered-","dir":"Reference","previous_headings":"","what":"Method set_parameters_ordered()","title":"Representation of a grassland plant population — FunctionalGroup","text":"Efficient setter, assumes parameters come known order.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of a grassland plant population — FunctionalGroup","text":"","code":"FunctionalGroup$set_parameters_ordered(ordered_parameter_values)"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of a grassland plant population — FunctionalGroup","text":"ordered_parameter_values Parameter values set. Need order pFunctionalGroup]$fg_parameter_names.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Representation of a grassland plant population — FunctionalGroup","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of a grassland plant population — FunctionalGroup","text":"","code":"FunctionalGroup$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/FunctionalGroup.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of a grassland plant population — FunctionalGroup","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":null,"dir":"Reference","previous_headings":"","what":"Management Data Class — ManagementData","title":"Management Data Class — ManagementData","text":"Management Data Class Management Data Class","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Management Data Class — ManagementData","text":"Data structure contains management data can serve input ModvegeSite simulation run.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Management Data Class — ManagementData","text":"management_file string file read. is_empty boolean Used determine management data present . latter case, ModvegeSite simulate management decisions automatically. years List unique years data available. cut_years numeric Vector length N N total number cuts read input file. Gives year corresponding cut made. cut_DOY numeric Vector length N giving day year (integer) cut made. intensity string Management intensity \"autocut\". One c(\"high\", \"middle\", \"low\").","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Management Data Class — ManagementData","text":"ManagementData$new() ManagementData$read_management() ManagementData$ensure_file_integrity() ManagementData$get_management_for_year() ManagementData$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Management Data Class — ManagementData","text":"Create new ManagementData object.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Management Data Class — ManagementData","text":"","code":"ManagementData$new(management_file = NULL, years = NULL)"},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Management Data Class — ManagementData","text":"management_file string Path file containing management data read. years numeric Vector years management extracted.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"method-read-management-","dir":"Reference","previous_headings":"","what":"Method read_management()","title":"Management Data Class — ManagementData","text":"Read management data supplied management_file.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Management Data Class — ManagementData","text":"","code":"ManagementData$read_management(management_file, years = NULL)"},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Management Data Class — ManagementData","text":"management_file Path name file containing management data. years Years management extracted. Default (NULL) read found years.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Management Data Class — ManagementData","text":"None object's field filled.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"method-ensure-file-integrity-","dir":"Reference","previous_headings":"","what":"Method ensure_file_integrity()","title":"Management Data Class — ManagementData","text":"Check required columns present cut DOYs increasing given year.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Management Data Class — ManagementData","text":"","code":"ManagementData$ensure_file_integrity(cut_data)"},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Management Data Class — ManagementData","text":"cut_data data.frame containing cut data.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"method-get-management-for-year-","dir":"Reference","previous_headings":"","what":"Method get_management_for_year()","title":"Management Data Class — ManagementData","text":"Extract management data given year simply filters data matching year returns list relevant keys.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Management Data Class — ManagementData","text":"","code":"ManagementData$get_management_for_year(year)"},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Management Data Class — ManagementData","text":"year integer Year extract management data.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Management Data Class — ManagementData","text":"M list containing keys: is_empty boolean Used determine management data present . latter case, ModvegeSite simulate management decisions automatically. cut_years numeric Vector length N N total number cuts year, read input file. Gives year corresponding cut made. cut_DOY numeric Vector length N giving day year (integer) cut made. intensity string Management intensity \"autocut\". One c(\"high\", \"middle\", \"low\"). n_cuts integer Number cuts occurring given year. two vectors cut_DOY cut_years differ object's respective fields data selected year present.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Management Data Class — ManagementData","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Management Data Class — ManagementData","text":"","code":"ManagementData$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/ManagementData.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Management Data Class — ManagementData","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"growR environment data — ModvegeEnvironment","title":"growR environment data — ModvegeEnvironment","text":"Data structure contains inputs (parameters pertaining site, vegetation, weather management) growR simulations.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"growR environment data — ModvegeEnvironment","text":"class contains site parameters, weather management data one simulation run growR given site several years. Methods provided allow access relevant data given year. inputs read data files respective data classes WeatherData, ManagementData ModvegeParameters. parameters can simultaneously specified config file using read_config().","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"growR environment data — ModvegeEnvironment","text":"site_name Name site simulated. run_name Name simulation run. Allows distinguishing different simulations site. Defaults \"-\" name. run_name_in_filename run name represented output file. run_name default \"-\", indicating name, empty string. Otherwise, run_name prepended underscore _. years Years environment data (weather & management) present. param_file Name supplied parameter file. weather_file Name supplied weather file. management_file Name supplied management file. parameters ModvegeParameters object. weather WeatherData object. management ManagementData object. input_dir Directory parameter, weather management files searched . Defaults `getOption(\"growR.input_dir\").","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"growR environment data — ModvegeEnvironment","text":"ModvegeEnvironment$new() ModvegeEnvironment$set_run_name() ModvegeEnvironment$load_inputs() ModvegeEnvironment$make_filename_for_run() ModvegeEnvironment$get_environment_for_year() ModvegeEnvironment$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"growR environment data — ModvegeEnvironment","text":"Instantiate new ModvegeEnvironment","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"growR environment data — ModvegeEnvironment","text":"","code":"ModvegeEnvironment$new(   site_name,   run_name = \"-\",   years = NULL,   param_file = \"-\",   weather_file = \"-\",   management_file = \"-\",   input_dir = NULL )"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"growR environment data — ModvegeEnvironment","text":"site_name string Name simulated site. run_name string Name simulation run. Used differentiate different simulation conditions site. Defaults \"-\", indicates specific run name. years numeric Vector integer years simulated. param_file string Name file contains site vegetation parameters. default value \"-\"  provided, assumed \"SITENAME_parameters.csv\". weather_file string Analogous param_file. management_file string Analogous param_file. input_dir string Path directory containing input files. Defaults getOption(\"growR.input_dir\").","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"method-set-run-name-","dir":"Reference","previous_headings":"","what":"Method set_run_name()","title":"growR environment data — ModvegeEnvironment","text":"Set run name update run_name_in_filename.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"growR environment data — ModvegeEnvironment","text":"","code":"ModvegeEnvironment$set_run_name(run_name)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"growR environment data — ModvegeEnvironment","text":"run_name Str. New value self$run_name.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"method-load-inputs-","dir":"Reference","previous_headings":"","what":"Method load_inputs()","title":"growR environment data — ModvegeEnvironment","text":"Load simulation inputs. Stores parameters, management weather data files specified self$parameter_file, self$weather_file self$management_file, respectively.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"growR environment data — ModvegeEnvironment","text":"","code":"ModvegeEnvironment$load_inputs()"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"method-make-filename-for-run-","dir":"Reference","previous_headings":"","what":"Method make_filename_for_run()","title":"growR environment data — ModvegeEnvironment","text":"Ensure readable filename given run_name.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"growR environment data — ModvegeEnvironment","text":"","code":"ModvegeEnvironment$make_filename_for_run(run_name)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"growR environment data — ModvegeEnvironment","text":"run_name Name run converted filename.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"growR environment data — ModvegeEnvironment","text":"version run_name can used filename.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"method-get-environment-for-year-","dir":"Reference","previous_headings":"","what":"Method get_environment_for_year()","title":"growR environment data — ModvegeEnvironment","text":"Get weather environment given year Convenience function retrieve environmental management inputs given year multi-year data containers self$weather self$management.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"growR environment data — ModvegeEnvironment","text":"","code":"ModvegeEnvironment$get_environment_for_year(year)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"growR environment data — ModvegeEnvironment","text":"year int; year extract data.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"growR environment data — ModvegeEnvironment","text":"list(W, M) W WeatherData M ManagementData object given year.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"growR environment data — ModvegeEnvironment","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"growR environment data — ModvegeEnvironment","text":"","code":"ModvegeEnvironment$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeEnvironment.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"growR environment data — ModvegeEnvironment","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Data Object — ModvegeParameters","title":"Parameter Data Object — ModvegeParameters","text":"Data structure contains site vegetation parameters necessary configuration growR simulation run.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parameter Data Object — ModvegeParameters","text":"Programmatically speaking, parameters described Parameter description also fields R6Class.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"parameter-description","dir":"Reference","previous_headings":"","what":"Parameter description","title":"Parameter Data Object — ModvegeParameters","text":"following list description model parameters, including vegetation parameters, defined functional group composition.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"site-and-model-parameters","dir":"Reference","previous_headings":"","what":"Site and model parameters","title":"Parameter Data Object — ModvegeParameters","text":"LON geographic longitude site degree. LAT geographic latitude site degree. ELV geographic elevation site m..s.l. WHC water-holding capacity site mm. NI site nutritional index (dimensionless). RUEmax maximum radiuation use efficiency g DM per MJ. w_FGA relative weight functional group . w_FGB relative weight functional group B. w_FGC relative weight functional group C. w_FGD relative weight functional group D. sigmaGV rate GV respirative biomass loss (dimensionless). sigmaGR rate GR respirative biomass loss (dimensionless). T0 photosynthesis activation temperature (degree C). T1 photosynthesis plateau temperature (degree C). T2 photosynthesis max temperature (degree C). KGV basic senescence rate GV (dimensionless). KGR basic senescence rate GR (dimensionless). KlGV basic abscission rate GV (dimensionless). KlGR basic abscission rate GR (dimensionless). maxOMDDV organic matter digestibility gram per gram DV. minOMDDR organic matter digestibility gram per gram DR. CO2_growth_factor strength effect CO2 concentration growth. See parameter b fCO2_growth_mod(). crop_coefficient multiplicative factor K~c~ reference evapotranspiration ET~0~ multiplied get crop evapotranspiration ET~c~: ET~c~ = K~c~ ET~0~ senescence_cap fraction c~s~ GRO SEN limited: SEN~~^max^ = c~s~ GRO~~ GV, GR. Makes less likely grass population die . Can set large values order effectively disable senescence capping.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"initial-conditions","dir":"Reference","previous_headings":"","what":"Initial conditions","title":"Parameter Data Object — ModvegeParameters","text":"AgeGV Age green vegetative matter degree Celsius days. AgeGR Age green reproductive matter degree Celsius days. AgeDV Age dead vegetative matter degree Celsius days. AgeDR Age dead reproductive matter degree Celsius days. BMGV biomass GV (kg DM per ha). BMGR biomass GR (kg DM per ha). BMDV biomass DV (kg DM per ha). BMDR biomass DR (kg DM per ha). BMDR biomass DR (kg DM per ha). SENG senescence GV (kg DM per ha). SENG senescence GR (kg DM per ha). ABSG abscission DV (kg DM per ha). ABSG abscission DR (kg DM per ha). ST thermal time (degree days). cBM cumulative total biomass (kg per ha).","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"vegetation-parameters","dir":"Reference","previous_headings":"","what":"Vegetation parameters","title":"Parameter Data Object — ModvegeParameters","text":"SLA Specific Leaf Area m^2^ per g. pcLAM Percentage laminae (number 0 1). ST1 Temperature sum degree Celsiues days seasonality function SEA starts decrease maximum plateau. See also SEA(). ST2 Temperature sum degree Celsiues days seasonality function SEA decreased back minimum value. See also SEA(). maxSEA Maximum value seasonality function SEA() minSEA Minimum value seasonality function SEA(). Usually, minSEA = 1 - (maxSEA - 1). maxOMDGV Maximum organic matter digestability green vegetative matter arbitrary units. minOMDGV Minimum organic matter digestability green vegetative matter arbitrary units. maxOMDGR Maximum organic matter digestability green reproductive matter arbitrary units. minOMDGR Minimum organic matter digestability green reproductive matter arbitrary units. BDGV Bulk density green vegetative dry matter g per m^3^. BDDV Bulk density dead vegetative dry matter g per m^3^. BDGR Bulk density green reproductive dry matter g per m^3^. BDDR Bulk density dead reproductive dry matter g per m^3^. fg_parameter_names Vector strings variable names vegetation parameters governed functional group composition.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Parameter Data Object — ModvegeParameters","text":"required_parameter_names Names parameters default value therefore strictly required. parameter_names Names required optional parameters state variables. n_parameters Number total parameters. functional_group FunctionalGroup instance holding vegetation parameters. fg_parameter_names Names vegetation parameters defined functional group composition. initial_condition_names Names initial conditions. param_file Name parameter file initial parameter values read.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Parameter Data Object — ModvegeParameters","text":"ModvegeParameters$new() ModvegeParameters$read_parameters() ModvegeParameters$set_parameters() ModvegeParameters$update_functional_group() ModvegeParameters$check_parameters() ModvegeParameters$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Parameter Data Object — ModvegeParameters","text":"Constructor","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Data Object — ModvegeParameters","text":"","code":"ModvegeParameters$new(param_file = NULL)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Data Object — ModvegeParameters","text":"param_file Name file containing site vegetation parameters.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"method-read-parameters-","dir":"Reference","previous_headings":"","what":"Method read_parameters()","title":"Parameter Data Object — ModvegeParameters","text":"Read parameters parameter file Reads parameters supplied param_file stores internal fields. function carries basic sanity checks supplied param_file reports unidentified missing parameter names.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Data Object — ModvegeParameters","text":"","code":"ModvegeParameters$read_parameters(param_file)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Data Object — ModvegeParameters","text":"param_file Path name file read parameters .","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Parameter Data Object — ModvegeParameters","text":"P List field names class variable parameter_names.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"method-set-parameters-","dir":"Reference","previous_headings":"","what":"Method set_parameters()","title":"Parameter Data Object — ModvegeParameters","text":"Savely update given parameters preferred method changing internal parameter values, special care taken account potential changes functional group weights.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Data Object — ModvegeParameters","text":"","code":"ModvegeParameters$set_parameters(params)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Data Object — ModvegeParameters","text":"params List name-value pairs parameters update.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"method-update-functional-group-","dir":"Reference","previous_headings":"","what":"Method update_functional_group()","title":"Parameter Data Object — ModvegeParameters","text":"Update functional group parameters run whenever functional group composition changed order reflect changes parameter list self$P.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Data Object — ModvegeParameters","text":"","code":"ModvegeParameters$update_functional_group()"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"method-check-parameters-","dir":"Reference","previous_headings":"","what":"Method check_parameters()","title":"Parameter Data Object — ModvegeParameters","text":"Parameter Sanity Check Ensure supplied params valid ModVege parameters , requested, check required parameters present. Issues warning invalid parameters throws error completeness satisfied (check_for_completeness =  TRUE).","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Data Object — ModvegeParameters","text":"","code":"ModvegeParameters$check_parameters(param_names, check_for_completeness = TRUE)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Data Object — ModvegeParameters","text":"param_names list parameter names checked. check_for_completeness Boolean Toggle whether validity supplied param_names checked whether want check required parameters present (default). latter case, required parameter missing, error thrown.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Parameter Data Object — ModvegeParameters","text":"not_known list unrecognized parameter names.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Parameter Data Object — ModvegeParameters","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Data Object — ModvegeParameters","text":"","code":"ModvegeParameters$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeParameters.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Data Object — ModvegeParameters","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":null,"dir":"Reference","previous_headings":"","what":"ModvegeSite — ModvegeSite","title":"ModvegeSite — ModvegeSite","text":"Implements ModVege grass growth model based Jouven et al. (2006). class contains model site parameters state variables attributes methods running ModVege weather management input. Use run() method carry simulation given year. results stored state variables instance can written file using write_output().","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"model-variables","dir":"Reference","previous_headings":"","what":"Model variables","title":"ModvegeSite — ModvegeSite","text":"See Jouven et al. (2006) thorough description model variables.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"state-variables","dir":"Reference","previous_headings":"","what":"State Variables","title":"ModvegeSite — ModvegeSite","text":"BM Standing biomass kg DM per ha. BMG Standing green biomass (kg DM / ha). cBM Cumulativeley grown biomass (kg DM / ha). dBM Daily grown biomass (kg DM / ha). hvBM Cumulative harvested biomass (kg DM / ha). OMD Organic matter digestibility (kg / kg). OMDG OMD green matter (kg / kg). ST Temperature sum degree Celsius days. REP Reproductive function. Gives fraction growth assigned reproductive growth. remainder goes vegetative growth. Dimensionless. PGRO Potential growth kg DM / ha. GRO Effective growth kg DM / ha. LAI Leaf area index, accounting proportion light intercepted sward. Dimensionless. LAIGV LAI green vegetative biomass. Dimensionless. AET Actual evapotranspiration mm. WR Water reserves mm. ENV Function representing environmental effects growth. Acts multiplicative factor. Dimensionless. ENVfPAR Part ENV due strength incident radiation. Dimensionless. ENVfT Part ENV due temperature. Dimensionless. ENVfW Part ENV due water limitation. Dimensionless.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"initial-conditions","dir":"Reference","previous_headings":"","what":"Initial conditions","title":"ModvegeSite — ModvegeSite","text":"AgeGV Age green vegetative matter degree Celsius days. AgeGR Age green reproductive matter degree Celsius days. AgeDV Age dead vegetative matter degree Celsius days. AgeDR Age dead reproductive matter degree Celsius days. BMGV biomass GV (kg DM per ha). BMGR biomass GR (kg DM per ha). BMDV biomass DV (kg DM per ha). BMDR biomass DR (kg DM per ha). BMDR biomass DR (kg DM per ha). SENG senescence GV (kg DM per ha). SENG senescence GR (kg DM per ha). ABSG abscission DV (kg DM per ha). ABSG abscission DR (kg DM per ha). ST thermal time (degree days). cBM cumulative total biomass (kg per ha).","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ModvegeSite — ModvegeSite","text":"Jouven M, Carrère P, Baumont R (2006). “Model Predicting Dynamics Biomass, Structure Digestibility Herbage Managed Permanent Pastures. 1. Model Description.” Grass Forage Science, 61(2), 112--124. ISSN 1365-2494, doi:10.1111/j.1365-2494.2006.00515.x , https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1365-2494.2006.00515.x.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ModvegeSite — ModvegeSite","text":"time_step Used time step model days (untested). state_variable_names Vector containing names model's state variables. n_state_variables Number state variables. version Version number growR package. written output files. site_name Name site simulated. run_name Name simulation run. Used distinguish different runs site. year Year simulated. days_per_year Number days year. j_start_of_growing_season Index (DOY) day growing season determined begin. cut_height Height remaining grass cut m. parameters ModvegeParameters object. determine_cut Function used decide whether cut occurs given DOY. overloaded depending whether management data provided . cut_DOYs List DOYs cut occurred. cut_during_growth_preriod Boolean indicate whether cut occurred growth period, case reproductive growth stopped. last_DOY_for_initial_cut autocut Start cutting DOY, even yield target reached. max_cut_period autocut Maximum period wait subsequent cuts. dry_precipitation_limit autocut Maximum amount allowed precipitation (mm) consider day. dry_days_before_cut autocut Number days shold dry cut made. dry_days_after_cut autocut Number days shold dry cut made. max_cut_delay autocut Number days farmer willing wait dry conditions cut made anyways. cut_delays autocut Vector keep track cut delay times. wait dry conditions cut made anyways. dry_window autocut Logical indicates DOY index considered dry enough cut. target_biomass autocut Biomass amount reached given DOY cut made. end_of_cutting_season autocut Determined DOY cuts made. BM_after_cut autocut Amount biomass remains cut (determined cut_height biomass densities BDGV, BDDV, BDGR, BDDR). weather WeatherData object. management ManagementData object. is_empty field TRUE, autocut routine employed. stubble_height float. Minimum height grass can assume. biomass fall height. can therefore smaller self$cut_height.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"ModvegeSite — ModvegeSite","text":"stubble_height float. Minimum height grass can assume. biomass fall height. can therefore smaller self$cut_height.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ModvegeSite — ModvegeSite","text":"ModvegeSite$new() ModvegeSite$get_weather() ModvegeSite$get_management() ModvegeSite$determine_cut_from_input() ModvegeSite$determine_cut_automatically() ModvegeSite$get_target_biomass() ModvegeSite$run() ModvegeSite$write_output() ModvegeSite$set_parameters() ModvegeSite$plot() ModvegeSite$plot_bm() ModvegeSite$plot_limitations() ModvegeSite$plot_water() ModvegeSite$plot_growth() ModvegeSite$plot_var() ModvegeSite$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ModvegeSite — ModvegeSite","text":"Constructor","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$new(parameters, site_name = \"-\", run_name = \"-\")"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"parameters ModvegeParameters object. site_name string Name simulated site. run_name string Name simulation run. Used differentiate different simulation conditions site. Defaults \"-\", indicates specific run name.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-get-weather-","dir":"Reference","previous_headings":"","what":"Method get_weather()","title":"ModvegeSite — ModvegeSite","text":"Return weather data exists","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$get_weather()"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"WeatherData object, exists.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-get-management-","dir":"Reference","previous_headings":"","what":"Method get_management()","title":"ModvegeSite — ModvegeSite","text":"Return management data exists","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$get_management()"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"ManagementData object, exists.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-determine-cut-from-input-","dir":"Reference","previous_headings":"","what":"Method determine_cut_from_input()","title":"ModvegeSite — ModvegeSite","text":"Read input whether cut occurs day DOY.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$determine_cut_from_input(DOY)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"DOY Integer day year check.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"Boolean TRUE cut happens day DOY.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-determine-cut-automatically-","dir":"Reference","previous_headings":"","what":"Method determine_cut_automatically()","title":"ModvegeSite — ModvegeSite","text":"Decide based simple criteria whether day year DOY good day cut. follows implementation described Petersen, Krischan, David Kraus, Pierluigi Calanca, Mikhail . Semenov, Klaus Butterbach-Bahl, Ralf Kiese. “Dynamic Simulation Management Events Assessing Impacts Climate Change Pre-Alpine Grassland Productivity.” European Journal Agronomy 128 (August 1, 2021): 126306. https://doi.org/10.1016/j.eja.2021.126306. decision cut made based two criteria. First, checked whether target biomass reached given DOY. defined target depends DOY given :func:get_target_biomass. said biomass present, return TRUE. Otherwise, checked whether given amount time passed since last cut. Depending whether first cut season , relevant parameters :int:last_DOY_for_initial_cut :int:max_cut_period. amount time passed, return TRUE, otherwise return FALSE.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$determine_cut_automatically(DOY)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"DOY Integer day year make cut decision.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"Boolean TRUE cut happens day DOY.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-get-target-biomass-","dir":"Reference","previous_headings":"","what":"Method get_target_biomass()","title":"ModvegeSite — ModvegeSite","text":"Get target value biomass given DOY, determines whether cut occur. regression target biomass based Fig. S2 supplementary material Petersen, Krischan, David Kraus, Pierluigi Calanca, Mikhail . Semenov, Klaus Butterbach-Bahl, Ralf Kiese. “Dynamic Simulation Management Events Assessing Impacts Climate Change Pre-Alpine Grassland Productivity.” European Journal Agronomy 128 (August 1, 2021): 126306. https://doi.org/10.1016/j.eja.2021.126306. refinement expected yield function altitude implemented according Table 1a Huguenen-Elie et al. \"Düngung von Grasland\", Agrarforschung Schweiz, 8, (6), 2017, https://www.agrarforschungschweiz.ch/2017/06/9-duengung-von-grasland-grud-2017/","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$get_target_biomass(DOY, intensity = \"high\")"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"DOY Integer day year consider. intensity One (\"high\", \"middle\", \"low\") specifying management intensity..","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"target Biomass (kg / ha) reached day DOY management intensity.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"ModvegeSite — ModvegeSite","text":"Carry ModVege simulation one year.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$run(year, weather, management)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"year Integer specifying year consider. weather Weather list given year returned WeatherData$get_weather_for_year. management Management list given year provided ModvegeEnvironment$get_environment_for_year().","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"None Fills state variables instance simulated values. Access programmatically write file using write_output().","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-write-output-","dir":"Reference","previous_headings":"","what":"Method write_output()","title":"ModvegeSite — ModvegeSite","text":"Write values ModVege results given file. header metadata prepended actual data.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$write_output(filename, force = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"filename Path name filename created overwritten. force Boolean TRUE, prompt user writing.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"None Writes simulation results file filename.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-set-parameters-","dir":"Reference","previous_headings":"","what":"Method set_parameters()","title":"ModvegeSite — ModvegeSite","text":"Savely update values self$parameters. just shorthand underlying ModvegeParameters object's set_parameters() function. Special care taken account potential changes functional group weights.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$set_parameters(params)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"params List name-value pairs parameters update.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"None Updates object's parameter values.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"ModvegeSite — ModvegeSite","text":"Create overview plot 16 state variables. Creates simple base R plot showing temporal evolution 16 modeled state variables. Can sensibly run simulation carried , .e. instance's run() method called.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$plot(...)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"... arguments discarded.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"NULL Creates plot result active device.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-plot-bm-","dir":"Reference","previous_headings":"","what":"Method plot_bm()","title":"ModvegeSite — ModvegeSite","text":"Create overview plot biomass. Creates simple base R plot showing BM cutting events , applicable, target biomass, dBM, cBM hvBM. Can sensibly run simulation carried , .e. instance's run() method called.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$plot_bm(smooth_interval = 28, ...)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"smooth_interval Int. Number days variable dBM smoothened. ... arguments discarded.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"NULL Creates plot result active device.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-plot-limitations-","dir":"Reference","previous_headings":"","what":"Method plot_limitations()","title":"ModvegeSite — ModvegeSite","text":"Create overview plot limiting factors. Creates simple base R plot showing different environmental limitation functions time. Can sensibly run simulation carried , .e. instance's run() method called.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$plot_limitations(...)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"... arguments discarded.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"NULL Creates plot result active device.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-plot-water-","dir":"Reference","previous_headings":"","what":"Method plot_water()","title":"ModvegeSite — ModvegeSite","text":"Create overview plot water balance. Creates simple base R plot showing different variables pertaining water balance, namely water reserves WR, actual evapotranspiration AET, leaf area index LAI LAI green vegetative compartment LAIGV. Can sensibly run simulation carried , .e. instance's run() method called.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$plot_water(...)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"... arguments discarded.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"NULL Creates plot result active device.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-plot-growth-","dir":"Reference","previous_headings":"","what":"Method plot_growth()","title":"ModvegeSite — ModvegeSite","text":"Create overview plot growth dynamics. Creates simple base R plot showing different variables pertaining growth dynamics, namely potential growth PGRO, effective growth GRO, reproductive function REP temperature sum ST. Can sensibly run simulation carried , .e. instance's run() method called.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$plot_growth(...)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"... arguments discarded.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"NULL Creates plot result active device.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-plot-var-","dir":"Reference","previous_headings":"","what":"Method plot_var()","title":"ModvegeSite — ModvegeSite","text":"Plot temporal evolution modeled state variable.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$plot_var(var, ...)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"var String. Name state variable plot. ... arguments passed base plot() function.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"ModvegeSite — ModvegeSite","text":"None, plots current device.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ModvegeSite — ModvegeSite","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"ModvegeSite — ModvegeSite","text":"","code":"ModvegeSite$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/ModvegeSite.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModvegeSite — ModvegeSite","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Parameter Scan Results — PscanPlotter","title":"Plot Parameter Scan Results — PscanPlotter","text":"class facilitates interactive visual analysis parameter scan results.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Plot Parameter Scan Results — PscanPlotter","text":"analyzed List, output analyze_parameter_scan(). params Vector names scanned parameters. metrics Vector names model performance metrics use. n_params Number scanned parameters. n_metrics Number performance metrics apply. res data.frame holding parameter scan results. contains n_params + n_metrics + 1 columns: one column scanned parameter, one employed metric additional column (name n) give parameter combination (.e. row) identifying number. n_combinations Number rowns res. sorted List containing copies res sorted different performance metric. List keys values self$metrics. selection Vector integers corresponding ID number combinations (column n self$res) highlighted.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Plot Parameter Scan Results — PscanPlotter","text":"PscanPlotter$new() PscanPlotter$set_variable() PscanPlotter$analyze() PscanPlotter$plot() PscanPlotter$print_info() PscanPlotter$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Plot Parameter Scan Results — PscanPlotter","text":"Construct set PscanPlotter instance.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — PscanPlotter","text":"","code":"PscanPlotter$new(analyzed, variable = \"dBM\")"},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Parameter Scan Results — PscanPlotter","text":"analyzed List; Output analyze_parameter_scan(). variable Str; Name variable analyzed visualize. Can changed later set_variable(). Allowed values keys analyzed except params metrics.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"method-set-variable-","dir":"Reference","previous_headings":"","what":"Method set_variable()","title":"Plot Parameter Scan Results — PscanPlotter","text":"Choose variable visualize.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — PscanPlotter","text":"","code":"PscanPlotter$set_variable(variable)"},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Parameter Scan Results — PscanPlotter","text":"variable Chosen variable name. One \"dBM\", \"cBM\", \"cBM_end\"","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"method-analyze-","dir":"Reference","previous_headings":"","what":"Method analyze()","title":"Plot Parameter Scan Results — PscanPlotter","text":"Enter analysis loop. plots analysis results enters simple command-line interface insights can gathered. Particularly, allows highlighting specific parameter combinations, either index number selecting best performers according given metric.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — PscanPlotter","text":"","code":"PscanPlotter$analyze()"},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Plot Parameter Scan Results — PscanPlotter","text":"Plot parameter scan results. every combination scanned parameter metric, subplot generated parameter values plotted performance score metric every parameter combination. result static. Use PscanPlotter$analyze() interactive version.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — PscanPlotter","text":"","code":"PscanPlotter$plot()"},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"method-print-info-","dir":"Reference","previous_headings":"","what":"Method print_info()","title":"Plot Parameter Scan Results — PscanPlotter","text":"Print information selected parameter combinations. parameter values performance scores combinations referred integers selection printed console.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — PscanPlotter","text":"","code":"PscanPlotter$print_info(selection)"},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Parameter Scan Results — PscanPlotter","text":"selection Vector integers representing IDs parameter combinations (.e. column n self$res).","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Plot Parameter Scan Results — PscanPlotter","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — PscanPlotter","text":"","code":"PscanPlotter$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/PscanPlotter.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Parameter Scan Results — PscanPlotter","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/SEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Seasonal effect on growth — SEA","title":"Seasonal effect on growth — SEA","text":"Function representing strategy plants adjusting roots:shoots  ratios season.","code":""},{"path":"https://kuadrat.github.io/growR/reference/SEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seasonal effect on growth — SEA","text":"","code":"SEA(ST, minSEA = 0.65, maxSEA = 1.35, ST1 = 800, ST2 = 1450)"},{"path":"https://kuadrat.github.io/growR/reference/SEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seasonal effect on growth — SEA","text":"ST float Temperature sum degree(C)-days. minSEA float < 1. Minimum value SEA. maxSEA float > 1. Maximum value SEA. ST1 float Temperature sum SEA declines maximum  plateau. ST2 float Temperature sum SEA reaches remains  minimum.","code":""},{"path":"https://kuadrat.github.io/growR/reference/SEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seasonal effect on growth — SEA","text":"","code":"SEA(800) #> [1] 1.256667"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":null,"dir":"Reference","previous_headings":"","what":"Weather Data Object — WeatherData","title":"Weather Data Object — WeatherData","text":"Data structure containing weather data given site several years.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weather Data Object — WeatherData","text":"fields representing weather variables vectors length 365 times N, N number years weather data stored. words, every variable one value 365 N years.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"weather-inputs","dir":"Reference","previous_headings":"","what":"Weather inputs","title":"Weather Data Object — WeatherData","text":"weather input file organized space separated columns year column least following parameters headers (columns ignored): DOY day year given year Ta average temperature given day (Celsius). precip precipitation millimeter per day. PAR photosynthetically active radiation MJ/m^2^. Can calculated average sunlight irradiance SRad J/s/m^2^ : PAR = SRad * 0.47 * 24 * 60 * 60 / 1e6 ET0 evapotranspiration mm. parameters stored object respective PARAM_vec fields.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"snow-model","dir":"Reference","previous_headings":"","what":"Snow model","title":"Weather Data Object — WeatherData","text":"precipitation temperature inputs used order estimate snow cover day use snow model. employed model formulated Kokkonen et al. 2006 makes use parameters Rango Martinec, 1995.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weather Data Object — WeatherData","text":"Rango , Martinec J (1995). “Revisiting Degree-Day Method Snowmelt Computations.” JAWRA Journal American Water Resources Association, 31(4), 657--669. ISSN 1752-1688, doi:10.1111/j.1752-1688.1995.tb03392.x . Kokkonen T, Koivusalo H, Jakeman , Norton J (2006). “Construction Degree-Day Snow Model Light Ten Iterative Steps Model Development.” iEMSs Third Biennial Meeting: \"Summit Environmental Modelling Software\". International Environmental Modelling Software Society, Burlington, USA, July 2006.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Weather Data Object — WeatherData","text":"weather_file Name provided weather data file. years numeric Integer representation contained years. vec_size Length PARAM_vec vectors, equal number contained years times 365. year_vec Vector length vec_size, holding year respective index. W list generated get_weather_for_year() contains weather data given year. keys list : aCO2 (atmospheric CO2 concentration ppm) year DOY Ta Ta_sm (smoothed daily average temperature) PAR PP PET liquidP melt snow ndays (number days year)","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Weather Data Object — WeatherData","text":"WeatherData$new() WeatherData$read_weather() WeatherData$ensure_file_integrity() WeatherData$calculate_day_length() WeatherData$get_weather_for_year() WeatherData$clone()","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Weather Data Object — WeatherData","text":"Create new WeatherData object.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Data Object — WeatherData","text":"","code":"WeatherData$new(weather_file = NULL, years = NULL)"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Data Object — WeatherData","text":"weather_file string Path file containing weather data read. years numeric Vector years weather extracted.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"method-read-weather-","dir":"Reference","previous_headings":"","what":"Method read_weather()","title":"Weather Data Object — WeatherData","text":"Read weather data supplied weather_file.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Data Object — WeatherData","text":"","code":"WeatherData$read_weather(weather_file, years = NULL)"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Data Object — WeatherData","text":"weather_file Path name file containing weather data. years Years weather extracted. Default (NULL) read found years.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"method-ensure-file-integrity-","dir":"Reference","previous_headings":"","what":"Method ensure_file_integrity()","title":"Weather Data Object — WeatherData","text":"Check supplied input file formatted correctly. Check required column names present fix NA entries.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Data Object — WeatherData","text":"","code":"WeatherData$ensure_file_integrity(weather)"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Data Object — WeatherData","text":"weather data.table read input file header = TRUE.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"method-calculate-day-length-","dir":"Reference","previous_headings":"","what":"Method calculate_day_length()","title":"Weather Data Object — WeatherData","text":"Calculate expected length day based site's geographical latitude.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Data Object — WeatherData","text":"","code":"WeatherData$calculate_day_length(latitude)"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Data Object — WeatherData","text":"latitude numeric; geographical latitude degrees.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"method-get-weather-for-year-","dir":"Reference","previous_headings":"","what":"Method get_weather_for_year()","title":"Weather Data Object — WeatherData","text":"Extract state variables weather data given year return list.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Data Object — WeatherData","text":"","code":"WeatherData$get_weather_for_year(year)"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Data Object — WeatherData","text":"year integer Year extract weather data.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Weather Data Object — WeatherData","text":"W List containing keys aCO2, year, DOY, Ta, Ta_sm, PAR, PP, PET, liquidP, melt, snow, ndays.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Weather Data Object — WeatherData","text":"objects class cloneable method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather Data Object — WeatherData","text":"","code":"WeatherData$clone(deep = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/WeatherData.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weather Data Object — WeatherData","text":"deep Whether make deep clone.","code":""},{"path":"https://kuadrat.github.io/growR/reference/aCO2_inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Concentration representative year — aCO2_inverse","title":"Concentration representative year — aCO2_inverse","text":"Inverse `atmospheric_CO2`: retrieve year given CO2  concentration reached.","code":""},{"path":"https://kuadrat.github.io/growR/reference/aCO2_inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concentration representative year — aCO2_inverse","text":"","code":"aCO2_inverse(aCO2)"},{"path":"https://kuadrat.github.io/growR/reference/aCO2_inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concentration representative year — aCO2_inverse","text":"aCO2 Target CO2 concentration ppm.","code":""},{"path":"https://kuadrat.github.io/growR/reference/aCO2_inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concentration representative year — aCO2_inverse","text":"year Approximate year (floating point number) target    concentration reached.","code":""},{"path":"https://kuadrat.github.io/growR/reference/aCO2_inverse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concentration representative year — aCO2_inverse","text":"give reasonable result values 317ppm, corresponding  year 1949, minimum parabola located  second order fit data used aCO2.fct.","code":""},{"path":"https://kuadrat.github.io/growR/reference/aCO2_inverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concentration representative year — aCO2_inverse","text":"","code":"aCO2_inverse(420) #> [1] 2023.267 aCO2_inverse(700) #> [1] 2098.318 # Insensible aCO2_inverse(100) #> Warning: NaNs produced #> [1] NaN"},{"path":"https://kuadrat.github.io/growR/reference/add_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Add data to a ggplot — add_lines","title":"Add data to a ggplot — add_lines","text":"Add lineplot *x_key* *y_key* columns *data*  supplied ggplot object *ax*. none supplied, new one created.","code":""},{"path":"https://kuadrat.github.io/growR/reference/add_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add data to a ggplot — add_lines","text":"","code":"add_lines(   data,   ax = NULL,   y_key = \"dBM_smooth\",   x_key = \"DOY\",   style = \"line\",   label = NULL,   ... )"},{"path":"https://kuadrat.github.io/growR/reference/add_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add data to a ggplot — add_lines","text":"data data.frame similar object interpretable ggplot. ax list returned ggplot() related functions. x_key, y_key Column names *data* plotted. style XXX ggplot geom_XXX use. label Codename line used legend creation.  NULL, use *y_key*. ... arguments passed selected ggplot geom.","code":""},{"path":"https://kuadrat.github.io/growR/reference/add_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add data to a ggplot — add_lines","text":"ax ggplot list (like input *ax*).","code":""},{"path":"https://kuadrat.github.io/growR/reference/add_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add data to a ggplot — add_lines","text":"","code":"library(ggplot2) # Add first set of data ax = add_lines(mtcars, x_key = \"wt\", y_key = \"mpg\", label = \"First Line\")  # Add one more line to the plot ax = add_lines(mtcars, ax = ax, x_key = \"wt\", y_key = \"qsec\",  label = \"Second Line\")  print(ax)"},{"path":"https://kuadrat.github.io/growR/reference/analyze_parameter_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze results of a parameter scan — analyze_parameter_scan","title":"Analyze results of a parameter scan — analyze_parameter_scan","text":"Analyze results parameter scan","code":""},{"path":"https://kuadrat.github.io/growR/reference/analyze_parameter_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze results of a parameter scan — analyze_parameter_scan","text":"","code":"analyze_parameter_scan(   parameter_scan_results,   datafile = \"\",   smooth_interval = 28 )"},{"path":"https://kuadrat.github.io/growR/reference/analyze_parameter_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze results of a parameter scan — analyze_parameter_scan","text":"parameter_scan_results String List. string, interpreted name rds file contains results parameter scan loaded using readRDS(). Otherwise, output run_parameter_scan() directly. datafile Name path file containing measured data. model results parameter_scan_results compared data therein. empty, site inferred ModvegeSite objects parameter_scan_results corresponding data file searched `getOption(\"growR.data_dir\", default = \"data\"). smooth_interval Int. Number days variable dBM smoothened. set make experimental data simulated data comparable possible.","code":""},{"path":"https://kuadrat.github.io/growR/reference/analyze_parameter_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze results of a parameter scan — analyze_parameter_scan","text":"analyzed list five keys: dBM, cBM, cBM_end, metrics params. dBM data.frame 1 + n_params + n_metrics columns row represents different parameter combination. first column (n) gives row number used identify parameter combination. subsequent n_params columns give values parameters used combination. final n_metrics columns give resulting performance score model run parameters metric applied model variable dBM. cBM data.frame format key dBM. first n_params + 1 columns identical data.frame dBM. difference final n_metrics columns give performance scores respect model variable cBM. cBM_end data.frame analogous dBM cBM, time last n_metrics columns give performance scores respect variable cBM_end, final value cBM, .e. cumulative grown biomass end year. params vector containing names scanned parameters. also column names columns 2:(n_params+1) results. metrics vector containing names employed performance metrics. also column names last n_metrics columns results.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/analyze_parameter_scan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze results of a parameter scan — analyze_parameter_scan","text":"","code":"# There needs to be data available with which the model is to be compared. # For this example, use data provided by the package. path = system.file(\"extdata\", package = \"growR\") datafile = file.path(path, \"posieux1.csv\")  # We also use example parameter scan data provided by the package. # In the real world, you would generally create your own data using  # `run_parameter_scan()`. analyze_parameter_scan(parameter_scan_example, datafile = datafile) #> $metrics #> [1] \"bias\" \"MAE\"  \"RMSE\" #>  #> $params #> [1] \"w_FGA\" \"w_FGB\" \"w_FGC\" \"w_FGD\" \"NI\"    #>  #> $dBM #>     n w_FGA w_FGB w_FGC w_FGD   NI        bias       MAE      RMSE #> 1   1  0.25  0.50  0.25     0 0.75 -0.16419980 0.4121337 0.5509299 #> 2   2  0.25  0.50  0.25     0 1.00  0.37751388 0.5616504 0.7263866 #> 3   3  0.25  0.75  0.00     0 0.75  0.01932302 0.4459105 0.6276639 #> 4   4  0.25  0.75  0.00     0 1.00  0.66012890 0.7781165 1.0460631 #> 5   5  0.50  0.25  0.25     0 0.75 -0.11642138 0.3867247 0.5155541 #> 6   6  0.50  0.25  0.25     0 1.00  0.45122258 0.5778548 0.7362369 #> 7   7  0.50  0.50  0.00     0 0.75  0.07664023 0.4441456 0.6178312 #> 8   8  0.50  0.50  0.00     0 1.00  0.75151179 0.8490970 1.0913082 #> 9   9  0.75  0.25  0.00     0 0.75  0.12918741 0.4492931 0.6126609 #> 10 10  0.75  0.25  0.00     0 1.00  0.83592409 0.9173581 1.1348994 #>  #> $cBM #>     n w_FGA w_FGB w_FGC w_FGD   NI        bias        MAE       RMSE #> 1   1  0.25  0.50  0.25     0 0.75 -0.13008035 0.13186180 0.15652216 #> 2   2  0.25  0.50  0.25     0 1.00  0.38746620 0.38746620 0.42660768 #> 3   3  0.25  0.75  0.00     0 0.75  0.03281790 0.06620229 0.07540092 #> 4   4  0.25  0.75  0.00     0 1.00  0.64515615 0.64515615 0.72225753 #> 5   5  0.50  0.25  0.25     0 0.75 -0.08854830 0.09152647 0.11209344 #> 6   6  0.50  0.25  0.25     0 1.00  0.44361801 0.44361801 0.48903023 #> 7   7  0.50  0.50  0.00     0 0.75  0.08346587 0.10527472 0.11363656 #> 8   8  0.50  0.50  0.00     0 1.00  0.72353157 0.72353157 0.80873053 #> 9   9  0.75  0.25  0.00     0 0.75  0.12863606 0.14195089 0.15724209 #> 10 10  0.75  0.25  0.00     0 1.00  0.79117326 0.79117326 0.88505112 #>  #> $cBM_end #>     n w_FGA w_FGB w_FGC w_FGD   NI       bias       MAE      RMSE #> 1   1  0.25  0.50  0.25     0 0.75 -0.9204985 0.9204985 0.9204985 #> 2   2  0.25  0.50  0.25     0 1.00 -0.8683340 0.8683340 0.8683340 #> 3   3  0.25  0.75  0.00     0 0.75 -0.9029277 0.9029277 0.9029277 #> 4   4  0.25  0.75  0.00     0 1.00 -0.8416330 0.8416330 0.8416330 #> 5   5  0.50  0.25  0.25     0 0.75 -0.9157582 0.9157582 0.9157582 #> 6   6  0.50  0.25  0.25     0 1.00 -0.8610272 0.8610272 0.8610272 #> 7   7  0.50  0.50  0.00     0 0.75 -0.8972664 0.8972664 0.8972664 #> 8   8  0.50  0.50  0.00     0 1.00 -0.8325599 0.8325599 0.8325599 #> 9   9  0.75  0.25  0.00     0 0.75 -0.8920878 0.8920878 0.8920878 #> 10 10  0.75  0.25  0.00     0 1.00 -0.8242270 0.8242270 0.8242270 #>"},{"path":"https://kuadrat.github.io/growR/reference/append_to_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Write *data* to supplied file in append mode without generating a warning \nmessage. — append_to_table","title":"Write *data* to supplied file in append mode without generating a warning \nmessage. — append_to_table","text":"function essentially wraps `write.table` calling handler suppresses appending warnings appear argument  `col.names = TRUE`.","code":""},{"path":"https://kuadrat.github.io/growR/reference/append_to_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write *data* to supplied file in append mode without generating a warning \nmessage. — append_to_table","text":"","code":"append_to_table(data, filename, ...)"},{"path":"https://kuadrat.github.io/growR/reference/append_to_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write *data* to supplied file in append mode without generating a warning \nmessage. — append_to_table","text":"data object can handled `write.table`. filename Name file append . ... additional arguments passed `write.table`.","code":""},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":null,"dir":"Reference","previous_headings":"","what":"Atmospheric CO2 concentration — atmospheric_CO2","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"Retrieve CO2 concentration (ppm) given calendar year.","code":""},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"","code":"atmospheric_CO2(year)"},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"year Calender year extract CO2 concentration.","code":""},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"Approximate CO2 concentration ppm given year.","code":""},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"function defines CO2 concentration function calendar year. based polynomial fit annual CO2 data published NOAA <https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_gl.txt>","code":""},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"approximately valid years range 1949 - 2020","code":""},{"path":"https://kuadrat.github.io/growR/reference/atmospheric_CO2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atmospheric CO2 concentration — atmospheric_CO2","text":"","code":"atmospheric_CO2(1990) #> [1] 352.4456 atmospheric_CO2(2020) #> [1] 411.8264 # Insensible atmospheric_CO2(1800) #> [1] 632.464"},{"path":"https://kuadrat.github.io/growR/reference/autocut.html","id":null,"dir":"Reference","previous_headings":"","what":"autocut — autocut","title":"autocut — autocut","text":"Simulation routine realistically predict grass cutting events. follows implementation described Petersen et al. (2021). decision cut made based two criteria. First, checked whether *target biomass* reached given  DOY. defined target depends DOY given  :func:`get_target_biomass`. said biomass present, return `TRUE`. Otherwise, checked whether given amount time passed  since last cut. Depending whether first cut  season , relevant parameters  :int:`last_DOY_for_initial_cut` :int:`max_cut_period`. amount time passed, return `TRUE`, otherwise return  `FALSE`. target biomass given day determined following principles  described Petersen et al. exact regression target biomass based Fig. S2  supplementary material Petersen et al. refinement expected yield function altitude  implemented according Table 1a Huguenen et al. (2017).","code":""},{"path":"https://kuadrat.github.io/growR/reference/autocut.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"autocut — autocut","text":"Petersen K, Kraus D, Calanca P, Semenov MA, Butterbach-Bahl K, Kiese R (2021). “Dynamic Simulation Management Events Assessing Impacts Climate Change Pre-Alpine Grassland Productivity.” European Journal Agronomy, 128, 126306. ISSN 1161-0301, doi:10.1016/j.eja.2021.126306 , https://www.sciencedirect.com/science/article/pii/S1161030121000782. Huguenin-Elie IEMPSALWK, Jeangros B (2017). “Grundlagen für die Düngung landwirtschaftlicher Kulturen der Schweiz (GRUD), Kapitel 9: Düngung von Grasland.” Agrarforschung Schweiz. https://www.agrarforschungschweiz.ch/2017/06/9-duengung-von-grasland-grud-2017/.","code":""},{"path":"https://kuadrat.github.io/growR/reference/box_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint smoother — box_smooth","title":"Endpoint smoother — box_smooth","text":"Smooth data vector x endpoint.","code":""},{"path":"https://kuadrat.github.io/growR/reference/box_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint smoother — box_smooth","text":"","code":"box_smooth(x, box_width = 28)"},{"path":"https://kuadrat.github.io/growR/reference/box_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint smoother — box_smooth","text":"x 1D data smoothed. box_width Width (units vector steps) box used smoothing.","code":""},{"path":"https://kuadrat.github.io/growR/reference/box_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint smoother — box_smooth","text":"x_smooth Smoothened version x.","code":""},{"path":"https://kuadrat.github.io/growR/reference/box_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Endpoint smoother — box_smooth","text":"Employ endpoint box filter (aka \"running mean\" endpoint smoother) 1-D data x:   x considered zero-padded vor values -box_width < 1.","code":"x_smoothed[i] = mean(x[i-box_width:i])"},{"path":"https://kuadrat.github.io/growR/reference/box_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint smoother — box_smooth","text":"","code":"# Create a sine wave with noise x = seq(0, 4*pi, 0.1) y = sin(x) + runif(length(x)) # Apply endpoint smoothing y_smooth = box_smooth(y, box_width = 5)"},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Debugging utilities — browse","title":"Debugging utilities — browse","text":"Debug specified function func entering browser() right beginning (browse()) end (browse_end()) function.","code":""},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debugging utilities — browse","text":"","code":"browse(func, ...)  browse_end(func, ...)"},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debugging utilities — browse","text":"func R function browsed. ... Arguments function func browsed.","code":""},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debugging utilities — browse","text":"Returns result func(...). Enters browser().","code":""},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Debugging utilities — browse","text":"convenience shorthands R's builtin debug tools, like debugonce() trace()/untrace() combination.","code":""},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Debugging utilities — browse","text":"browse_end(): Enter browser() end function call func(...). works, function can execute without error end. Otherwise, error thrown.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Debugging utilities — browse","text":"","code":"if (FALSE) { # interactive() # Define a simple function for this example my_func = function(a) { for (i in 1:5) { a = a + i }; return(a) }  # Enter a browser at the beginning of the function browse(my_func, 0)  # Enter a browser at the end of the function. This allows us to inspect  # the function's local variables without having to go through the whole loop. browse_end(my_func, 0) }"},{"path":"https://kuadrat.github.io/growR/reference/build_functional_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the effective functional group as a weighted linear combination. — build_functional_group","title":"Build the effective functional group as a weighted linear combination. — build_functional_group","text":"Uses weights found :param:P construct effective functional groups updates functional group parameters P.","code":""},{"path":"https://kuadrat.github.io/growR/reference/build_functional_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the effective functional group as a weighted linear combination. — build_functional_group","text":"","code":"build_functional_group(P)"},{"path":"https://kuadrat.github.io/growR/reference/build_functional_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the effective functional group as a weighted linear combination. — build_functional_group","text":"P list; name-value pairs parameters. contain least one non-zero functional group weight w_FGX X (, B, C, D). weights present assumed 0.","code":""},{"path":"https://kuadrat.github.io/growR/reference/build_functional_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the effective functional group as a weighted linear combination. — build_functional_group","text":"FunctionalGroup object composed linear combination four groups FG_A, FG_B, FG_C FG_D.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/build_functional_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build the effective functional group as a weighted linear combination. — build_functional_group","text":"","code":"parameters = list(w_FGA = 0.5, w_FGB = 0.5) build_functional_group(parameters) #> <FunctionalGroup> #>   Public: #>     BDDR: 150 #>     BDDV: 500 #>     BDGR: 300 #>     BDGV: 850 #>     LLS: 650 #>     SLA: 0.029 #>     ST1: 650 #>     ST2: 1275 #>     clone: function (deep = FALSE)  #>     fg_parameter_names: SLA pcLAM ST1 ST2 maxSEA minSEA LLS maxOMDGV minOMDGV ma ... #>     get_parameters: function ()  #>     get_parameters_ordered: function ()  #>     initialize: function (...)  #>     maxOMDGR: 0.9 #>     maxOMDGV: 0.9 #>     maxSEA: 1.25 #>     minOMDGR: 0.55 #>     minOMDGV: 0.675 #>     minSEA: 0.75 #>     pcLAM: 0.68 #>     set_parameters: function (...)  #>     set_parameters_ordered: function (ordered_parameter_values)   # The w_FGX weights in the input are interpreted as relative to each other. # Thus, they do not need to satisfy the sum rule. The following is  # equivalent to the previous example: parameters = list(w_FGA = 1, w_FGB = 1) build_functional_group(parameters) #> <FunctionalGroup> #>   Public: #>     BDDR: 150 #>     BDDV: 500 #>     BDGR: 300 #>     BDGV: 850 #>     LLS: 650 #>     SLA: 0.029 #>     ST1: 650 #>     ST2: 1275 #>     clone: function (deep = FALSE)  #>     fg_parameter_names: SLA pcLAM ST1 ST2 maxSEA minSEA LLS maxOMDGV minOMDGV ma ... #>     get_parameters: function ()  #>     get_parameters_ordered: function ()  #>     initialize: function (...)  #>     maxOMDGR: 0.9 #>     maxOMDGV: 0.9 #>     maxSEA: 1.25 #>     minOMDGR: 0.55 #>     minOMDGV: 0.675 #>     minSEA: 0.75 #>     pcLAM: 0.68 #>     set_parameters: function (...)  #>     set_parameters_ordered: function (ordered_parameter_values)"},{"path":"https://kuadrat.github.io/growR/reference/check_for_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if *package* is available — check_for_package","title":"Check if *package* is available — check_for_package","text":"functions pertaining package core require additional  libraries. libraries listed *suggested* `DESCRIPTION`  function called user respective  libraries installed, notice notify user.  purpose *function* `check_for_package`.","code":""},{"path":"https://kuadrat.github.io/growR/reference/check_for_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if *package* is available — check_for_package","text":"","code":"check_for_package(package, stop = TRUE)"},{"path":"https://kuadrat.github.io/growR/reference/check_for_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if *package* is available — check_for_package","text":"package Name package check . stop Toggle whether error thrown (`TRUE`) warning  generated (`FALSE`).","code":""},{"path":"https://kuadrat.github.io/growR/reference/check_for_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if *package* is available — check_for_package","text":"`TRUE` package found. `FALSE` found    *stop* `FALSE`. Otherwise, error thrown.","code":""},{"path":"https://kuadrat.github.io/growR/reference/check_for_package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if *package* is available — check_for_package","text":"function checks *package* installed loaded. ,  either produces warning throws error, depending value  *stop*.","code":""},{"path":"https://kuadrat.github.io/growR/reference/compare.R.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare simulation results — compare.R","title":"Compare simulation results — compare.R","text":"script compare.R ships growR package  automatically put working directory  setup_directory()  can used compare results growR simulation runs. simple script, can adjusted personal needs.","code":""},{"path":"https://kuadrat.github.io/growR/reference/compare.R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare simulation results — compare.R","text":"script makes use packages ggplot2, patchwork growR  functions facilitate data loading plotting, like  load_measured_data()  add_lines().","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Valid Combinations — create_combinations","title":"Create Valid Combinations — create_combinations","text":"Generate list contains possible combinations provided parameter values. excludes combinations invalid sum criterion functional groups w_FGA + w_FGB + w_FGC + w_FGD = 1 fulfilled.","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Valid Combinations — create_combinations","text":"","code":"create_combinations(param_values, eps = 0.02)"},{"path":"https://kuadrat.github.io/growR/reference/create_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Valid Combinations — create_combinations","text":"param_values list giving options parameter values combined. format list[[param_name]] =  param_values param_values vector values respective parameter. parameter names functional group weights (w_FGX X (, B, C, D)) receive special treatment therefore need spelled correctly. eps Float specifying precision sum criterion functional group satisfied. criterion considered satisfied, ``` abs(w_FGA + w_FGB + w_FGC + w_FGD) - 1) <= eps","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Valid Combinations — create_combinations","text":"combinations unnamed list every entry list containing parameter values (named input param_values) valid combination.","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_combinations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Valid Combinations — create_combinations","text":"Assume example following list argument param_values:   generate combinations One can see input param_values set carefully: one ensure given w_FGX values can actually add 1. following bad counterexample, one single valid combination found, even though many values w_FGA w_FGB provided:   Similarly, steps w_FGX match, might end many valid combinations, even though ranges reasonabl:   , combination can made w_FGA c(0.6, 0.7, 0.8, 0.9) w_FGB = 0.25.","code":"list(w_FGA = c(0, 0.5, 1), w_FGB = c(0, 0.5, 1), NI = c(0.5, 0.9)) list(w_FGA = seq(0.5, 1, 0.01), w_FGB = c(0.5, 1, 0.01)) list(w_FGA = seq(0.5, 1, 0.1), w_FGB = c(0, 0.5, 0.25))"},{"path":"https://kuadrat.github.io/growR/reference/create_combinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Valid Combinations — create_combinations","text":"","code":"# Define the parameter steps you want to explore. This is a minimal example. # A more realistic one follows below. param_values = list(w_FGA = c(0, 0.5, 1),                     w_FGB = c(0, 0.5, 1),                     NI = c(0.5, 0.9) ) # Create all valid combinations of the defined steps create_combinations(param_values) #> [[1]] #> w_FGA w_FGB    NI  #>   0.0   1.0   0.5  #>  #> [[2]] #> w_FGA w_FGB    NI  #>   0.0   1.0   0.9  #>  #> [[3]] #> w_FGA w_FGB    NI  #>   0.5   0.5   0.5  #>  #> [[4]] #> w_FGA w_FGB    NI  #>   0.5   0.5   0.9  #>  #> [[5]] #> w_FGA w_FGB    NI  #>   1.0   0.0   0.5  #>  #> [[6]] #> w_FGA w_FGB    NI  #>   1.0   0.0   0.9  #>   # More realistic example for an initial exploration of parameter space,  # where we suspect that functional groups A and B should be more prevalent  # than C and D. This produces 54 parameter combinations, which is a number  # of model evaluations that can run within a reasonable timeframe  # (depending on your system). param_values = list(w_FGA = seq(0, 1, 0.33),                     w_FGB = seq(0, 1, 0.33),                     w_FGC = seq(0, 0.7, 0.33),                     w_FGD = seq(0, 0.7, 0.33),                     NI = seq(0.5, 1.0, 0.25) ) length(create_combinations(param_values)) #> [1] 54  # The default value for *eps* made sure that combinations of 0.33 + 0.66 =  # 0.99 etc. are considered \"valid\". If we make *eps* too small, no valid  # combinations can be found: length(create_combinations(param_values, eps = 1e-3)) #> [1] 0"},{"path":"https://kuadrat.github.io/growR/reference/create_example_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide an example ModvegeEnvironment — create_example_environment","title":"Provide an example ModvegeEnvironment — create_example_environment","text":"intended testing examples documentation.","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_example_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide an example ModvegeEnvironment — create_example_environment","text":"","code":"create_example_environment(site = \"posieux\")"},{"path":"https://kuadrat.github.io/growR/reference/create_example_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide an example ModvegeEnvironment — create_example_environment","text":"site Choose example site environment created. Options: \"posieux\", \"sorens\".","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_example_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide an example ModvegeEnvironment — create_example_environment","text":"E [ModvegeEnvironment] instance based example data site shipped package.","code":""},{"path":"https://kuadrat.github.io/growR/reference/create_example_environment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide an example ModvegeEnvironment — create_example_environment","text":"","code":"extdata = system.file(\"extdata\", package = \"growR\")  print(extdata) #> [1] \"/home/runner/work/_temp/Library/growR/extdata\" list.files(extdata, recursive = TRUE) #>  [1] \"example_config.txt\"      \"posieux1.csv\"            #>  [3] \"posieux2.csv\"            \"posieuxD.csv\"            #>  [5] \"posieux_management1.txt\" \"posieux_management2.txt\" #>  [7] \"posieux_parameters.csv\"  \"posieux_weather.txt\"     #>  [9] \"sorens1.csv\"             \"sorens2.csv\"             #> [11] \"sorens_management1.txt\"  \"sorens_management2.txt\"  #> [13] \"sorens_parameters.csv\"   \"sorens_weather.txt\"      create_example_environment() #> <ModvegeEnvironment> #>   Public: #>     clone: function (deep = FALSE)  #>     get_environment_for_year: function (year)  #>     initialize: function (site_name, run_name = \"-\", years = NULL, param_file = \"-\",  #>     input_dir:  #>     load_inputs: function ()  #>     make_filename_for_run: function (run_name)  #>     management: ManagementData, R6 #>     management_file: /home/runner/work/_temp/Library/growR/extdata/posieux_ma ... #>     param_file: /home/runner/work/_temp/Library/growR/extdata/posieux_pa ... #>     parameters: ModvegeParameters, R6 #>     run_name: - #>     run_name_in_filename:  #>     set_run_name: function (run_name)  #>     site_name: posieux1 #>     weather: WeatherData, R6 #>     weather_file: /home/runner/work/_temp/Library/growR/extdata/posieux_we ... #>     years: 2013 2014 2015 2016"},{"path":"https://kuadrat.github.io/growR/reference/ensure_table_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if supplied table contains all *required* variables. — ensure_table_columns","title":"Check if supplied table contains all *required* variables. — ensure_table_columns","text":"Logs error variable missing lists missing variables  error message along *data_name*.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ensure_table_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if supplied table contains all *required* variables. — ensure_table_columns","text":"","code":"ensure_table_columns(required, data, data_name = \"the data table\")"},{"path":"https://kuadrat.github.io/growR/reference/ensure_table_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if supplied table contains all *required* variables. — ensure_table_columns","text":"required List names required variables. data data.frame similar object checked. data_name Name displayed error message variable  missing.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ensure_unique_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace given filename by a version that contains an incremental number \nin order to prevent overwriting existing files. — ensure_unique_filename","title":"Replace given filename by a version that contains an incremental number \nin order to prevent overwriting existing files. — ensure_unique_filename","text":"Replace given filename version contains incremental number  order prevent overwriting existing files.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ensure_unique_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace given filename by a version that contains an incremental number \nin order to prevent overwriting existing files. — ensure_unique_filename","text":"","code":"ensure_unique_filename(path, add_num = TRUE)"},{"path":"https://kuadrat.github.io/growR/reference/ensure_unique_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace given filename by a version that contains an incremental number \nin order to prevent overwriting existing files. — ensure_unique_filename","text":"path string; Filename including path check uniqueness. add_num boolean; TRUE, add incremental number anyways, even  filename conflict exists.","code":""},{"path":"https://kuadrat.github.io/growR/reference/ensure_unique_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace given filename by a version that contains an incremental number \nin order to prevent overwriting existing files. — ensure_unique_filename","text":"unique filename.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_growth_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"CO2 growth modifier — fCO2_growth_mod","title":"CO2 growth modifier — fCO2_growth_mod","text":"Function describing effects elevated CO2 growth.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_growth_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CO2 growth modifier — fCO2_growth_mod","text":"","code":"fCO2_growth_mod(c_CO2, b = 0.5, c_ref = 360)"},{"path":"https://kuadrat.github.io/growR/reference/fCO2_growth_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CO2 growth modifier — fCO2_growth_mod","text":"c_CO2 numeric Atmospheric CO2 concentration ppm b numeric Strength CO2 effect growth. Kellner et al. report values bewtween 0 2 interval highest likelihood (0.1, 0.3). However, Soltani Sinclair discuss b = 0.4 C4 plants b = 0.8 C3 plants. difference output function choosing small (0.1) large (0.8) value b effect result atmospheric concentration 700 ppm roughly 40 percent!. c_ref numeric Reference CO2 concentration ppm.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_growth_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CO2 growth modifier — fCO2_growth_mod","text":"function effects growth proposed Soltani et al (2012) later adapted equation (5) Kellner et al. (2017)","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_growth_mod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CO2 growth modifier — fCO2_growth_mod","text":"Soltani , Sinclair TR (2012). Modeling Physiology Crop Development, Growth Yield. CABI. ISBN 978-1-84593-971-7, xnHT6YOlk00C. Kellner J, Multsch S, Houska T, Kraft P, Müller C, Breuer L (2017). “Coupled Hydrological-Plant Growth Model Simulating Effect Elevated CO2 Temperate Grassland.” Agricultural Forest Meteorology, 246, 42--50. ISSN 0168-1923, doi:10.1016/j.agrformet.2017.05.017 , https://www.sciencedirect.com/science/article/pii/S0168192317301831.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_growth_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CO2 growth modifier — fCO2_growth_mod","text":"","code":"fCO2_growth_mod(420) #> [1] 1.077075 # The modifier is always relative to *c_ref*. This returns 1. fCO2_growth_mod(420, c_ref = 420) #> [1] 1"},{"path":"https://kuadrat.github.io/growR/reference/fCO2_transpiration_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"CO2 transpiration modifier — fCO2_transpiration_mod","title":"CO2 transpiration modifier — fCO2_transpiration_mod","text":"Function describing effects elevated CO2 transpiration.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_transpiration_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CO2 transpiration modifier — fCO2_transpiration_mod","text":"","code":"fCO2_transpiration_mod(c_CO2, c_ref = 360)"},{"path":"https://kuadrat.github.io/growR/reference/fCO2_transpiration_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CO2 transpiration modifier — fCO2_transpiration_mod","text":"c_CO2 numeric Atmospheric CO2 concentration ppm c_ref numeric Reference CO2 concentration ppm.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_transpiration_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CO2 transpiration modifier — fCO2_transpiration_mod","text":"function effect transpiration equations (2-6) Kruijt et al. appears paper small formal mistake said equations. stated values, possible reproduce tabulated values $c$ close 1, table 3. Instead, conclude equation (4) read:   multiplicative terms giving small negative numbers. factors $s_gs$, $s_T$ $F_T$ grasslands taken pages 260 261 Kruijt et al. averaged stated ranges get:","code":"c = 1 + s_gs * s_T * F_T * deltaCO2 c ~= 1 + 0.0001 * deltaCO2"},{"path":"https://kuadrat.github.io/growR/reference/fCO2_transpiration_mod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CO2 transpiration modifier — fCO2_transpiration_mod","text":"Kruijt B, Witte JM, Jacobs CMJ, Kroon T (2008). “Effects Rising Atmospheric CO2 Evapotranspiration Soil Moisture: Practical Approach Netherlands.” Journal Hydrology, 349(3), 257--267. ISSN 0022-1694, doi:10.1016/j.jhydrol.2007.10.052 , https://www.sciencedirect.com/science/article/pii/S0022169407006373.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fCO2_transpiration_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CO2 transpiration modifier — fCO2_transpiration_mod","text":"","code":"fCO2_transpiration_mod(420) #> [1] 0.994 # The modifier is always relative to *c_ref*. This returns 1. fCO2_transpiration_mod(420, c_ref = 420) #> [1] 1"},{"path":"https://kuadrat.github.io/growR/reference/fPAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Radiation limitation — fPAR","title":"Radiation limitation — fPAR","text":"Threshold function representing growth limitation due lack  photosynthetically active radiation (PAR).","code":""},{"path":"https://kuadrat.github.io/growR/reference/fPAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radiation limitation — fPAR","text":"","code":"fPAR(PAR)"},{"path":"https://kuadrat.github.io/growR/reference/fPAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radiation limitation — fPAR","text":"PAR float Photosynthetically active radiation MJ/m^2","code":""},{"path":"https://kuadrat.github.io/growR/reference/fPAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radiation limitation — fPAR","text":"value range [0, 1], acting multiplicative factor    plant growth.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fPAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radiation limitation — fPAR","text":"","code":"fPAR(4) #> [1] 1"},{"path":"https://kuadrat.github.io/growR/reference/fT.html","id":null,"dir":"Reference","previous_headings":"","what":"Temperature limitation — fT","title":"Temperature limitation — fT","text":"Threshold function representing growth limitation temperature.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temperature limitation — fT","text":"","code":"fT(t, T0 = 4, T1 = 10, T2 = 20)"},{"path":"https://kuadrat.github.io/growR/reference/fT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temperature limitation — fT","text":"t float Temperature degree Celsius. T0 float Photosynthesis activation temperature degree Celsius. T1 float Photosynthesis plateau temperature degree Celsius. T2 float Photosynthesis max temperature degree Celsius.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temperature limitation — fT","text":"value range (0, 1), acting multiplicative factor plant growth.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Temperature limitation — fT","text":"Photosynthesis suppressed T0, increases reaches maximum temperatures interval (T1, T2). temperatures exceeding T2, photosynthetic activity decreases reaches 0 final temperature 40 degree Celsius.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temperature limitation — fT","text":"","code":"fT(4) #> [1] 0 fT(10) #> [1] 1 fT(15) #> [1] 1"},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":null,"dir":"Reference","previous_headings":"","what":"Water stress — fW","title":"Water stress — fW","text":"Threshold function representing growth limitation due water stress.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Water stress — fW","text":"","code":"fW(W, PET)"},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Water stress — fW","text":"W Water stress given ratio water reserves water holding capacity. PET Potential evapotranspiration mm per day.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Water stress — fW","text":"value range (0, 1), acting multiplicative factor plant growth.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Water stress — fW","text":"equation (6) McCall et al. (2003).#'","code":""},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Water stress — fW","text":"McCall DG, Bishop-Hurley GJ (2003). “Pasture Growth Model Use Whole-Farm Dairy Production Model.” Agricultural Systems, 76(3), 1183--1205. ISSN 0308-521X, doi:10.1016/S0308-521X(02)00104-X , https://www.sciencedirect.com/science/article/pii/S0308521X0200104X.","code":""},{"path":"https://kuadrat.github.io/growR/reference/fW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Water stress — fW","text":"","code":"fW(0.5, 7) #> [1] 0.5 fW(0.5, 5) #> [1] 0.8 fW(0.5, 3) #> [1] 0.975"},{"path":"https://kuadrat.github.io/growR/reference/get_annual_gross_yield.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","title":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","text":"Based data Table 1a Lookup Table expected yield functions height management intensity Olivier Huguenin et al. (2017).","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_annual_gross_yield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","text":"","code":"get_annual_gross_yield(elevation, intensity = \"high\")"},{"path":"https://kuadrat.github.io/growR/reference/get_annual_gross_yield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","text":"elevation elevation considered site meters sea level. intensity One (\"high\", \"middle\", \"low\", \"extensive\"). Management intensity considered site.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_annual_gross_yield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","text":"Annual gross yield t / ha (metric tons per hectare). Note 1 t/ha = 0.1 kg/m^2.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_annual_gross_yield.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","text":"Huguenin-Elie IEMPSALWK, Jeangros B (2017). “Grundlagen für die Düngung landwirtschaftlicher Kulturen der Schweiz (GRUD), Kapitel 9: Düngung von Grasland.” Agrarforschung Schweiz. https://www.agrarforschungschweiz.ch/2017/06/9-duengung-von-grasland-grud-2017/.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_annual_gross_yield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup table returning expected annual gross yields as function of\nelevation and management intensity. — get_annual_gross_yield","text":"","code":"get_annual_gross_yield(1200) #> [1] 8.94 get_annual_gross_yield(1200, intensity = \"low\") #> [1] 4.16"},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Metric Functions — get_bias","title":"Metric Functions — get_bias","text":"Functions calculate different performance metrics. case get_bias: Calculate bias b, .e. average difference predicted y observed z values:","code":"bias = mean(y - z)"},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric Functions — get_bias","text":"","code":"get_bias(predicted, observed, ...)  root_mean_squared(predicted, observed, ...)  mean_absolute_error(predicted, observed, ...)"},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric Functions — get_bias","text":"predicted Vector containing predictions y. observed Vector containing observations z. ... relative Boolean. true give result ratio average observation mean(ovserved).","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metric Functions — get_bias","text":"m number representing relative absolute value metric.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Metric Functions — get_bias","text":"root_mean_squared(): Calculate square root average squared difference prediction observation:   mean_absolute_error(): Calculate average absolute differences prediction observation:","code":"RMSE = sqrt(sum(predicted - observed)^2) / length(predicted) MAE = mean(abs(predicted - observed))"},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Metric Functions — get_bias","text":"NA values completely ignored.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/get_bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metric Functions — get_bias","text":"","code":"predicted = c(21.5, 22.2, 19.1) observed = c(20, 20, 20) get_bias(predicted, observed) #> [1] 0.04666667 get_bias(predicted, observed, relative = FALSE) #> [1] 0.9333333  root_mean_squared(predicted, observed) #> [1] 0.08113774 root_mean_squared(predicted, observed, relative = FALSE) #> [1] 1.622755  mean_absolute_error(predicted, observed) #> [1] 0.07666667 mean_absolute_error(predicted, observed, relative = FALSE) #> [1] 1.533333"},{"path":"https://kuadrat.github.io/growR/reference/get_end_of_cutting_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Last day of cutting season — get_end_of_cutting_season","title":"Last day of cutting season — get_end_of_cutting_season","text":"Estimate last day still makes sense cut. done checking point expected target biomass (see get_relative_cut_contribution()) goes minimally harvestable standing biomass.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_end_of_cutting_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Last day of cutting season — get_end_of_cutting_season","text":"","code":"get_end_of_cutting_season(min_biomass, elevation, intensity = \"high\")"},{"path":"https://kuadrat.github.io/growR/reference/get_end_of_cutting_season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Last day of cutting season — get_end_of_cutting_season","text":"min_biomass float standing biomass value even harvested, elevation float Altitude m..s.l. intensity string Management intensity. One \"high\", \"middle\", \"low\"","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_end_of_cutting_season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Last day of cutting season — get_end_of_cutting_season","text":"float Last (fractional) day year cut still makes sense.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/get_end_of_cutting_season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Last day of cutting season — get_end_of_cutting_season","text":"","code":"get_end_of_cutting_season(50, 1200) #> [1] 394.1426 get_end_of_cutting_season(50, 1200, intensity = \"low\") #> [1] 388.9094"},{"path":"https://kuadrat.github.io/growR/reference/get_expected_n_cuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of expected cuts — get_expected_n_cuts","title":"Get number of expected cuts — get_expected_n_cuts","text":"Return number expected cuts site given elevation management intensity.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_expected_n_cuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of expected cuts — get_expected_n_cuts","text":"","code":"get_expected_n_cuts(elevation, intensity = \"high\")"},{"path":"https://kuadrat.github.io/growR/reference/get_expected_n_cuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of expected cuts — get_expected_n_cuts","text":"elevation elevation considered site meters sea level. intensity One (\"high\", \"middle\", \"low\", \"extensive\"). Management intensity considered site.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_expected_n_cuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of expected cuts — get_expected_n_cuts","text":"Number expected cuts per season.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_expected_n_cuts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get number of expected cuts — get_expected_n_cuts","text":"uses data.frame management_parameters lookup table interpolates linearly specified values.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_expected_n_cuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of expected cuts — get_expected_n_cuts","text":"","code":"get_expected_n_cuts(1200) #> [1] 3.25 get_expected_n_cuts(1200, intensity = \"low\") #> [1] 1.625"},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative cut contribution — get_relative_cut_contribution","title":"Relative cut contribution — get_relative_cut_contribution","text":"Get fraction total annual harvested biomass cut given DOY expected contribute.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative cut contribution — get_relative_cut_contribution","text":"","code":"get_relative_cut_contribution(DOY)"},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative cut contribution — get_relative_cut_contribution","text":"DOY Integer representing day year cut occurs.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative cut contribution — get_relative_cut_contribution","text":"fraction (0 1) biomass harvested cut given DOY divided total annual biomass.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative cut contribution — get_relative_cut_contribution","text":"regression target biomass based Fig. S2 supplementary material Petersen et al. (2021).","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative cut contribution — get_relative_cut_contribution","text":"Petersen K, Kraus D, Calanca P, Semenov MA, Butterbach-Bahl K, Kiese R (2021). “Dynamic Simulation Management Events Assessing Impacts Climate Change Pre-Alpine Grassland Productivity.” European Journal Agronomy, 128, 126306. ISSN 1161-0301, doi:10.1016/j.eja.2021.126306 , https://www.sciencedirect.com/science/article/pii/S1161030121000782.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_relative_cut_contribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative cut contribution — get_relative_cut_contribution","text":"","code":"get_relative_cut_contribution(1) #> [1] 0.488372 get_relative_cut_contribution(150) #> [1] 0.3054 get_relative_cut_contribution(365) #> [1] 0.04138 # DOYs larger than 365 are insensible get_relative_cut_contribution(600) #> [1] -0.2472"},{"path":"https://kuadrat.github.io/growR/reference/get_site_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the name of a site from a filename — get_site_name","title":"Extract the name of a site from a filename — get_site_name","text":"function assumes filenames begin site name,  potentially followed underscore characters.","code":""},{"path":"https://kuadrat.github.io/growR/reference/get_site_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the name of a site from a filename — get_site_name","text":"","code":"get_site_name(filename)"},{"path":"https://kuadrat.github.io/growR/reference/get_site_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the name of a site from a filename — get_site_name","text":"filename String `ModvegeSite` output filename.","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"growR: R implementation of the grass growth model ModVege. — growR-package","title":"growR: R implementation of the grass growth model ModVege. — growR-package","text":"Run grass growth simulations using grass growth model based ModVege (Jouven, M., P. Carrère, R. Baumont \"Model Predicting Dynamics Biomass, Structure Digestibility Herbage Managed Permanent Pastures. 1. Model Description.\" (2006) doi:10.1111/j.1365-2494.2006.00515.x ). implementation package contains additions cited version ModVege, simulations management decisions, influences snow cover. , model fit simulate grass growth mountainous regions, Swiss Alps. package also contains routines calibrating model helpful tools analysing model outputs performance.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/growR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"growR: R implementation of the grass growth model ModVege. — growR-package","text":"Maintainer: Kevin Kramer kevin.pasqual.kramer@protonmail.ch (ORCID) [copyright holder]","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR_package_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Default options introduced by package growR — growR_package_options","title":"Default options introduced by package growR — growR_package_options","text":"default options, set package loaded    `library(growR)`. get change current value option,  use `options()` function. growR.verbosity Integer controls much console output          generated growR functions. Higher numbers mean output.          See [logger()]. growR.input_dir Name directory look          input files. growR.output_dir Name directory output files         written. growR.data_dir Name directory look          measured data files.","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR_package_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default options introduced by package growR — growR_package_options","text":"","code":"growR_package_options"},{"path":"https://kuadrat.github.io/growR/reference/growR_package_options.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default options introduced by package growR — growR_package_options","text":"object class list length 4.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/growR_run_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Run growR simulations — growR_run_loop","title":"Run growR simulations — growR_run_loop","text":"Start loop runs specified config file.","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR_run_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run growR simulations — growR_run_loop","text":"","code":"growR_run_loop(modvege_environments, output_dir = \"\")"},{"path":"https://kuadrat.github.io/growR/reference/growR_run_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run growR simulations — growR_run_loop","text":"modvege_environments list ModvegeEnvironment instances. output_dir string; name directory output files written. output_dir == \"\" (default), files written.","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR_run_loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run growR simulations — growR_run_loop","text":"list format [[run]][[year]] containing clones ModvegeSite instances run. Also write files, output_dir nonempty.","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR_run_loop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run growR simulations — growR_run_loop","text":"default, returns empty list writes output output files specified site_name run_name fields supplied ModvegeEnvironment instances. Change behaviour write_files store_results arguments.","code":""},{"path":"https://kuadrat.github.io/growR/reference/growR_run_loop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run growR simulations — growR_run_loop","text":"","code":"env1 = create_example_environment(site = \"posieux\") env2 = create_example_environment(site = \"sorens\")  growR_run_loop(c(env1, env2), output_dir = \"\") #> [INFO]Starting run 1 out of 2. #> [INFO][Run 1/2]Simulating year 2013 (1/4) #> [INFO][Run 1/2]Simulating year 2014 (2/4) #> [INFO][Run 1/2]Simulating year 2015 (3/4) #> [INFO][Run 1/2]Simulating year 2016 (4/4) #> [INFO]Starting run 2 out of 2. #> [INFO][Run 2/2]Simulating year 2013 (1/4) #> [INFO][Run 2/2]Simulating year 2014 (2/4) #> [INFO][Run 2/2]Simulating year 2015 (3/4) #> [INFO][Run 2/2]Simulating year 2016 (4/4) #> [INFO]All runs completed. #> [[1]] #> [[1]][[1]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.457223659360304 0.492747302067495 0.48021377988667 0.6 ... #>     AgeDR: 502.84 504.12 504.79 508.13 513.74 517.69 519.45 519.45  ... #>     AgeDRp: 2613.02576747072 #>     AgeDV: 502.84 504.12 504.79 508.13 513.74 517.69 519.45 519.45  ... #>     AgeDVp: 310.006730167763 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2563.53680744978 #>     AgeGV: 102.84 104.12 104.79 108.13 113.74 117.69 119.45 119.45  ... #>     AgeGVp: 356.062211422787 #>     BM: 747.3588 746.178324096 745.562740186702 742.500042895222 ... #>     BMDR: 29.9148 29.876509056 29.8564917949325 29.7567711123374 2 ... #>     BMDRp: 2.60828702924489 #>     BMDV: 297.444 296.30181504 295.70624839177 292.743271782884 28 ... #>     BMDVp: 219.862237969144 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 470.997010495298 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0.122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0.122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     LAIGV: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     OMD: 0.681787828763536 0.681918967842231 0.681987052472049 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.866010508474576 0.865587457627119 0.865366016949152 0. ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.866010508474576 0.865587457627119 0.865366016949152 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.84 4.12 4.79 8.13 13.74 17.69 19.45 19.45 19.45 20.56  ... #>     STp: 3324.38 #>     WR: 130 129.509787758099 129.068168429521 128.689683936513 1 ... #>     WRp: 129.627111149557 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7235.25493639556 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 106 134 162 190 218 246 274 302 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 95 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2013 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[1]][[2]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.572832822953001 0.489080547324631 0.497218890323204 0. ... #>     AgeDR: 502.07 505.44 508.61 512.35 515.58 517.36 524.65 532.15  ... #>     AgeDRp: 3959.24452590726 #>     AgeDV: 502.07 505.44 508.61 512.35 515.58 517.36 524.65 532.15  ... #>     AgeDVp: 367.259877463267 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 3070.8736642586 #>     AgeGV: 102.07 105.44 108.61 112.35 115.58 117.36 124.65 132.15  ... #>     AgeGVp: 435.1239158176 #>     BM: 748.0749 744.959844207 742.058642727408 738.667618102169 ... #>     BMDR: 29.9379 29.837009277 29.7424259575919 29.6311892845105 2 ... #>     BMDRp: 0.153306987155716 #>     BMDV: 298.137 295.12283493 292.316216769816 289.036428817658 2 ... #>     BMDVp: 202.749087683463 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 135.270954408254 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 707.307063973773 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0.458 0.5 0.454 0.184 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0.458 0.5 0.454 0.184 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     LAIGV: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     OMD: 0.681707286262378 0.682054988178933 0.682375621137396 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.866265 0.865151186440678 0.864103474576271 0.862867372 ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.866265 0.865151186440678 0.864103474576271 0.862867372 ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.07 5.44 8.61 12.35 15.58 17.36 24.65 32.15 39.42 45.34 ... #>     STp: 3719.5 #>     WR: 129.946718652693 130 130 130 130 129.365338865 128.74430 ... #>     WRp: 127.011229396472 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 11463.8028078937 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 91 119 147 175 203 231 259 287 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 64 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2014 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[1]][[3]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0.00985649314933525 #>     ABSDV: 1.83842313064963 #>     AET: 0.19920064755 0.19901996769842 0.592248295151082 0.81323 ... #>     AgeDR: 500 500 504.91 509.88 509.88 509.88 510.27 515.11 522.86 ... #>     AgeDRp: 2950.65995373358 #>     AgeDV: 500 500 504.91 509.88 509.88 509.88 510.27 515.11 522.86 ... #>     AgeDVp: 320.820532488754 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2951.13482002105 #>     AgeGV: 100 100 104.91 109.88 109.88 109.88 110.27 115.11 122.86 ... #>     AgeGVp: 338.246964126842 #>     BM: 750 750 745.4337 740.878219371 740.878219371 740.8782193 ... #>     BMDR: 30 30 29.8527 29.704332081 29.704332081 29.704332081 29. ... #>     BMDRp: 1.55342681628609 #>     BMDV: 300 300 295.581 291.17388729 291.17388729 291.17388729 2 ... #>     BMDVp: 217.307698658349 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 509.617113025523 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0 0 0.55 1 0 0 0.084 0.224 0 0 0 0 0 0 0 0 0 ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0.55 1 0 0 0.084 0.224 0 0 0 0 0 0 0 0 0 ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     LAIGV: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     OMD: 0.681491525423729 0.681491525423729 0.682005119290321 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.866949152542373 0.866949152542373 0.865326355932203 0. ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.866949152542373 0.866949152542373 0.865326355932203 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 0 0 4.91 9.88 9.88 9.88 10.27 15.11 22.86 35.36 40.23 42 ... #>     STp: 3711.49 #>     WR: 129.800799840891 129.603626755415 130 129.709778732205 1 ... #>     WRp: 117.9543167997 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7396.84166354848 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 90 118 146 174 202 230 258 286 314 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 75 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2015 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[1]][[4]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.272542889414208 0.224447085399936 0.288574824085632 0. ... #>     AgeDR: 503.99 507.78 511.31 516.04 520.55 523.86 527.42 531.52  ... #>     AgeDRp: 2801.12465101814 #>     AgeDV: 503.99 507.78 511.31 516.04 520.55 523.86 527.42 531.52  ... #>     AgeDVp: 339.499460100257 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2754.74386558187 #>     AgeGV: 103.99 107.78 111.31 116.04 120.55 123.86 127.42 131.52  ... #>     AgeGVp: 383.05172521267 #>     BM: 746.2893 742.805883333 739.597524427364 735.343037848355 ... #>     BMDR: 29.8803 29.767053663 29.6619759635696 29.5216748172619 2 ... #>     BMDRp: 1.94108326472162 #>     BMDV: 296.409 293.03882967 289.935548463795 285.821363031093 2 ... #>     BMDVp: 209.232522532127 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 555.529397922986 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0 0 0 0 0.148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0 0 0.148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5. ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     LAIGV: 0.873936 0.873936 0.873936 0.873936 0.873936 0.873936 0. ... #>     OMD: 0.681908407324213 0.682295308592443 0.682647566048721 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.865630423728814 0.864377796610169 0.863211101694915 0. ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.865630423728814 0.864377796610169 0.863211101694915 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 47.939 ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 3.99 7.78 11.31 16.04 20.55 23.86 27.42 31.52 36.14 40.8 ... #>     STp: 3500.48 #>     WR: 130 130 130 130 130 129.790711380507 130 130 130 130 130 ... #>     WRp: 111.684576106885 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 8726.33497883479 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 89 117 145 173 201 229 257 285 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 26 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2016 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #>  #> [[2]] #> [[2]][[1]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.425137788528002 0.4583695833186 0.514875174072729 0.59 ... #>     AgeDR: 502.41 502.7 502.7 505.98 510.39 512.89 512.89 514.12 51 ... #>     AgeDRp: 3059.75216179612 #>     AgeDV: 502.41 502.7 502.7 505.98 510.39 512.89 512.89 514.12 51 ... #>     AgeDVp: 386.16446805472 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2295.17765333274 #>     AgeGV: 102.41 102.7 102.7 105.98 110.39 112.89 112.89 114.12 11 ... #>     AgeGVp: 370.305479244779 #>     BM: 747.7587 747.490907997 747.490907997 744.464666239853 74 ... #>     BMDR: 29.9277 29.919020967 29.919020967 29.8208865782282 29.68 ... #>     BMDRp: 0.500130124356253 #>     BMDV: 297.831 297.57188703 297.57188703 294.643779661625 290.7 ... #>     BMDVp: 282.480008175896 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 140 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 491.438768295548 #>     BM_after_cut: 1070 #>     ENV: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     LAIGV: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     OMD: 0.677537527475466 0.677569768025088 0.677569768025088 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.858665597014925 0.858576865671642 0.858576865671642 0. ... #>     OMDGR: 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0 ... #>     OMDGV: 0.858665597014925 0.858576865671642 0.858576865671642 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.41 2.7 2.7 5.98 10.39 12.89 12.89 14.12 14.12 14.93 16 ... #>     STp: 3005.38 #>     WR: 160 159.600913343104 159.873592083394 159.849885542053 1 ... #>     WRp: 159.800708876818 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7844.84187034734 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 106 134 162 190 218 246 274 302 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 99 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: sorens1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2013 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[2]][[2]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.538462853575821 0.44108127367381 0.48117957128052 0.19 ... #>     AgeDR: 502.03 505.18 509.1 512.19 513.89 515.61 522.11 528.58 5 ... #>     AgeDRp: 2669.21142844763 #>     AgeDV: 502.03 505.18 509.1 512.19 513.89 515.61 522.11 528.58 5 ... #>     AgeDVp: 418.359903859563 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2569.40156551628 #>     AgeGV: 102.03 105.18 109.1 112.19 113.89 115.61 122.11 128.58 1 ... #>     AgeGVp: 413.555373379791 #>     BM: 748.1121 745.200056985 741.609687482843 738.812083485428 ... #>     BMDR: 29.9391 29.844791835 29.7278002510068 29.6359413482312 2 ... #>     BMDRp: 1.82722569752177 #>     BMDV: 298.173 295.35526515 291.881887231836 289.176142137197 2 ... #>     BMDVp: 261.536447122351 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 140 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 731.411046472225 #>     BM_after_cut: 1070 #>     ENV: 0 0 0 0 0 0 0.3 0.294 0.562 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0.3 0.294 0.562 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     LAIGV: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     OMD: 0.677494554067618 0.677846661968646 0.67827836349193 0.6 ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.858781865671642 0.857818059701492 0.856618656716418 0. ... #>     OMDGR: 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0 ... #>     OMDGV: 0.858781865671642 0.857818059701492 0.856618656716418 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.03 5.18 9.1 12.19 13.89 15.61 22.11 28.58 36.39 40.79  ... #>     STp: 3336.94 #>     WR: 160 160 160 160 160 159.392168239272 158.940698255806 15 ... #>     WRp: 157.257794854547 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 10226.404797478 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 91 119 147 175 203 231 259 287 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 65 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: sorens1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2014 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[2]][[3]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0.0043292133946835 #>     ABSDV: 2.13640254190842 #>     AET: 0.19920064755 0.199048204821215 0.553229998408238 0.5051 ... #>     AgeDR: 500 500.15 504.87 508.03 508.03 508.03 509.26 513.06 519 ... #>     AgeDRp: 2958.06678161877 #>     AgeDV: 500 500.15 504.87 508.03 508.03 508.03 509.26 513.06 519 ... #>     AgeDVp: 411.077694631718 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2709.57058128289 #>     AgeGV: 100 100.15 104.87 108.03 108.03 108.03 109.26 113.06 119 ... #>     AgeGVp: 367.30328845583 #>     BM: 750 749.8605 745.47283284 742.576027166913 742.576027166 ... #>     BMDR: 30 29.9955 29.85392124 29.7595828488816 29.7595828488816 ... #>     BMDRp: 0.730668927372743 #>     BMDV: 300 299.865 295.6189116 292.816444318032 292.81644431803 ... #>     BMDVp: 270.430701507395 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 140 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 546.364532379602 #>     BM_after_cut: 1070 #>     ENV: 0 0 0 0 0 0 0 0 0.292 1 0 0 0.472 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0.292 1 0 0 0.472 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     LAIGV: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     OMD: 0.677265671641791 0.677282544702568 0.677816117294391 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.859402985074627 0.859357089552239 0.857912910447761 0. ... #>     OMDGR: 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0 ... #>     OMDGV: 0.859402985074627 0.859357089552239 0.857912910447761 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 0 0.15 4.87 8.03 8.03 8.03 9.26 13.06 19.52 30.44 33.27  ... #>     STp: 3444.05 #>     WR: 159.80079935245 160 160 160 159.518930436167 159.3773082 ... #>     WRp: 155.407170432611 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 8723.48037771063 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 118 146 174 202 230 258 286 314 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 97 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: sorens1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2015 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[2]][[4]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.288574824085632 0.248494987407072 0.272542889414208 0. ... #>     AgeDR: 502.97 505.51 507.62 510.78 513.77 515.61 518.18 521.58  ... #>     AgeDRp: 3294.61534088583 #>     AgeDV: 502.97 505.51 507.62 510.78 513.77 515.61 518.18 521.58  ... #>     AgeDVp: 427.34599834697 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2492.27519480207 #>     AgeGV: 102.97 105.51 107.62 110.78 113.77 115.61 118.18 121.58  ... #>     AgeGVp: 405.976159982019 #>     BM: 747.2379 744.896294574 742.965604418392 740.0920493681 7 ... #>     BMDR: 29.9109 29.834926314 29.7719746194775 29.6778951796799 2 ... #>     BMDRp: 0.362613930718022 #>     BMDV: 297.327 295.06136826 293.193629798914 290.41415418842 28 ... #>     BMDVp: 262.620457016568 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 140 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 563.50299526363 #>     BM_after_cut: 1070 #>     ENV: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.11 0 ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.11 0 ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     LAIGV: 0.811104 0.811104 0.811104 0.811104 0.811104 0.811104 0. ... #>     OMD: 0.677600930797493 0.677883307425121 0.678114770221929 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.858494253731343 0.857717089552239 0.857071492537313 0. ... #>     OMDGR: 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0.89 0 ... #>     OMDGV: 0.858494253731343 0.857717089552239 0.857071492537313 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.97 5.51 7.62 10.78 13.77 15.61 18.18 21.58 26.08 29.66 ... #>     STp: 3185.95 #>     WR: 160 160 160 160 160 160 160 160 160 160 160 160 160 159. ... #>     WRp: 140.565995242443 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 8659.23602568173 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 117 145 173 201 229 257 285 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 84 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: sorens1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2016 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #>"},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load experimental data — load_measured_data","title":"Load experimental data — load_measured_data","text":"Load datasets stored supplied files. Upon loading, cumulative biomass growth cBM automatically calculated given daily biomass growth dBM values.","code":""},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load experimental data — load_measured_data","text":"","code":"load_measured_data(filenames, sep = \",\")  load_data_for_sites(sites)  load_matching_data(filenames)"},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load experimental data — load_measured_data","text":"filenames Vector strings representing simulation output filenames matching data files searched loaded. sep String Field separator used datafiles. sites Vector site names data load.","code":""},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load experimental data — load_measured_data","text":"measured_data list data.frame corresponding one sites detected filenames. data.frame contains keys dBM: average daily biomass growth since last observation kg/ha. cBM: cumulative biomass growth DOY kg/ha. year: year observation. DOY: day year observation.","code":""},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load experimental data — load_measured_data","text":"load_matching_data() internally uses get_site_name() makes assumptions output filename formats. assumes measured data located \"data/\" adhere filename format x.csv x site name.","code":""},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Load experimental data — load_measured_data","text":"load_data_for_sites(): Data filenames generated convention `SITE.csv` searched  subdirectory `getOption(\"growR.data_dir\")`, defaults  `data/`. load_matching_data(): Accepts vector output filenames generated ModvegeSite$write_output() site names inferred.","code":""},{"path":"https://kuadrat.github.io/growR/reference/load_measured_data.html","id":"data-file-format","dir":"Reference","previous_headings":"","what":"Data file format","title":"Load experimental data — load_measured_data","text":"input data files expected consist four columns containing following fileds, order: date Date measurement yyyy-mm-dd format. year Year measurement. Identical yyyy date field. DOY Day year measurement. Jan 1st corresponds 1, Dec 31st corresponds 365 (except gap years). dBM Observed average daily biomass growth since last cut kg/ha. first row expected header row containing exact field names description . Columns may separated arbitrary character, specified sep argument. example data uses comma (\",\").","code":""},{"path":"https://kuadrat.github.io/growR/reference/logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Primitive logger for debugging. — logger","title":"Primitive logger for debugging. — logger","text":"Primitive logger debugging.","code":""},{"path":"https://kuadrat.github.io/growR/reference/logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primitive logger for debugging. — logger","text":"","code":"logger(msg = \"\", level = DEBUG, stop_on_error = TRUE)"},{"path":"https://kuadrat.github.io/growR/reference/logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primitive logger for debugging. — logger","text":"msg message print. level message printed level lower equal getOption(\"growR.verbosity\"). stop_on_error Can set FALSE order continue execution despite emitting message level ERROR.","code":""},{"path":"https://kuadrat.github.io/growR/reference/logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primitive logger for debugging. — logger","text":"None Prints console output.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Primitive logger for debugging. — logger","text":"","code":"logger(\"A standard message\", level = 3) #> [INFO]A standard message logger(\"A debug message\", level = 4) #> NULL logger(\"A deep debug message\", level = 5) #> NULL"},{"path":"https://kuadrat.github.io/growR/reference/make_yearDOY.html","id":null,"dir":"Reference","previous_headings":"","what":"Create unique DOY + year identifier — make_yearDOY","title":"Create unique DOY + year identifier — make_yearDOY","text":"Return numbers form YYYYDDD YYYY year DDD DOY.","code":""},{"path":"https://kuadrat.github.io/growR/reference/make_yearDOY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create unique DOY + year identifier — make_yearDOY","text":"","code":"make_yearDOY(years, DOYs)"},{"path":"https://kuadrat.github.io/growR/reference/make_yearDOY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create unique DOY + year identifier — make_yearDOY","text":"years int vector. DOYs int vector length *years*.","code":""},{"path":"https://kuadrat.github.io/growR/reference/make_yearDOY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create unique DOY + year identifier — make_yearDOY","text":"int vector length *years* containing numbers    form YYYYDDD, first four digits represent year last    four represent DOY.","code":""},{"path":"https://kuadrat.github.io/growR/reference/management_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Management practices for Swiss grasslands — management_parameters","title":"Management practices for Swiss grasslands — management_parameters","text":"Expected yields, uncertainties average number cuts function altitude management intensity.","code":""},{"path":"https://kuadrat.github.io/growR/reference/management_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Management practices for Swiss grasslands — management_parameters","text":"","code":"management_parameters"},{"path":"https://kuadrat.github.io/growR/reference/management_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Management practices for Swiss grasslands — management_parameters","text":"data.frame 15 rows 5 variables: intensity Management intensity altitude Altitude m..s.l. n_cuts Average number cuts yield Expected gross dry matter yield t / ha sigma_yield Uncertainty yield t / ha","code":""},{"path":"https://kuadrat.github.io/growR/reference/management_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Management practices for Swiss grasslands — management_parameters","text":"Data table 1b Olivier Huguenin et al.","code":""},{"path":"https://kuadrat.github.io/growR/reference/management_parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Management practices for Swiss grasslands — management_parameters","text":"Huguenin-Elie IEMPSALWK, Jeangros B (2017). “Grundlagen für die Düngung landwirtschaftlicher Kulturen der Schweiz (GRUD), Kapitel 9: Düngung von Grasland.” Agrarforschung Schweiz. https://www.agrarforschungschweiz.ch/2017/06/9-duengung-von-grasland-grud-2017/.","code":""},{"path":"https://kuadrat.github.io/growR/reference/metric_map.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Performance Metrics — metric_map","title":"List of Performance Metrics — metric_map","text":"list provides common metrics model performance along \"best value\".","code":""},{"path":"https://kuadrat.github.io/growR/reference/metric_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Performance Metrics — metric_map","text":"","code":"metric_map"},{"path":"https://kuadrat.github.io/growR/reference/metric_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of Performance Metrics — metric_map","text":"list item sublist containing keys func target. func function used calculate given metric. target value reached case optimal performance. limits Reasonable limits used plotting.","code":""},{"path":"https://kuadrat.github.io/growR/reference/parameter_scan_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example results of a parameter scan — parameter_scan_example","title":"Example results of a parameter scan — parameter_scan_example","text":"function run_parameter_scan() can take significant time execute, typically requires dozen model evaluations . order still showcase output can look like, facilitate testing giving examples documentation tools make use output run_parameter_scan() (e.g. analyze_parameter_scan()), example dataset provided.","code":""},{"path":"https://kuadrat.github.io/growR/reference/parameter_scan_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example results of a parameter scan — parameter_scan_example","text":"","code":"parameter_scan_example"},{"path":"https://kuadrat.github.io/growR/reference/parameter_scan_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example results of a parameter scan — parameter_scan_example","text":"list containing entry supplied parameter set param_values. entry list containing following keys: params parameter set used run growR entry. data list containing simulated year ModvegeSite object run respective year therefore carries respective results.","code":""},{"path":"https://kuadrat.github.io/growR/reference/parameter_scan_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example results of a parameter scan — parameter_scan_example","text":"input parameter scan produced output :","code":"- `eps = 2e-2` )"},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/parse_year_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and generate lists of years. — parse_year_strings","title":"Parse and generate lists of years. — parse_year_strings","text":"Parse generate lists years.","code":""},{"path":"https://kuadrat.github.io/growR/reference/parse_year_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and generate lists of years. — parse_year_strings","text":"","code":"parse_year_strings(year_strings)"},{"path":"https://kuadrat.github.io/growR/reference/parse_year_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and generate lists of years. — parse_year_strings","text":"year_strings vector strings either represents  single year sequence year format `start:stop`.","code":""},{"path":"https://kuadrat.github.io/growR/reference/parse_year_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and generate lists of years. — parse_year_strings","text":"run_years List integer vectors, representing years    simulate run.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plot.ModvegeSite.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ModVege simulation result overview — plot.ModvegeSite","title":"Plot ModVege simulation result overview — plot.ModvegeSite","text":"wraps ModvegeSite instance's plot() method.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plot.ModvegeSite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ModVege simulation result overview — plot.ModvegeSite","text":"","code":"# S3 method for ModvegeSite plot(x, ...)"},{"path":"https://kuadrat.github.io/growR/reference/plot.ModvegeSite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ModVege simulation result overview — plot.ModvegeSite","text":"x ModvegeSite instance. ... Arguments passed ModvegeSite$plot().","code":""},{"path":"https://kuadrat.github.io/growR/reference/plot.ModvegeSite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ModVege simulation result overview — plot.ModvegeSite","text":"NULL, plots active device.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/plot_parameter_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Parameter Scan Results — plot_parameter_scan","title":"Plot Parameter Scan Results — plot_parameter_scan","text":"Visualize results parameter scan allow interactive inspection model performance parameter space.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plot_parameter_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Scan Results — plot_parameter_scan","text":"","code":"plot_parameter_scan(analyzed, variable = \"dBM\", interactive = TRUE)"},{"path":"https://kuadrat.github.io/growR/reference/plot_parameter_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Parameter Scan Results — plot_parameter_scan","text":"analyzed List; Output analyze_parameter_scan(). variable Str; Name variable analyzed visualize. Can changed later PscanPlotter$set_variable(). Allowed values keys analyzed except params metrics. interactive boolean; Toggle just creating static plot (interactive = FALSE) entering small, interactive analysis setting (interactive = TRUE, default).","code":""},{"path":"https://kuadrat.github.io/growR/reference/plot_parameter_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Parameter Scan Results — plot_parameter_scan","text":"PscanPlotter object.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plot_parameter_scan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Parameter Scan Results — plot_parameter_scan","text":"hood function just creates PscanPlotter object calls analyze method.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/plot_parameter_scan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Parameter Scan Results — plot_parameter_scan","text":"","code":"if (FALSE) { # interactive() # There needs to be data available with which the modle is to be compared. # For this example, use data provided by the package. path = system.file(\"extdata\", package = \"growR\") datafile = file.path(path, \"posieux1.csv\")  # Analyze example output of `run_parameter_scan()`. results = analyze_parameter_scan(parameter_scan_example, datafile = datafile) # The following plots the results. psp = plot_parameter_scan(results, interactive = FALSE)  # The interactive session can still be entered later from the returned  # PscanPlotter object psp$analyze() }"},{"path":"https://kuadrat.github.io/growR/reference/plus-.FunctionalGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Addition of two functional groups — +.FunctionalGroup","title":"Addition of two functional groups — +.FunctionalGroup","text":"Addition occurs adding FG parameters separately.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plus-.FunctionalGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addition of two functional groups — +.FunctionalGroup","text":"","code":"# S3 method for FunctionalGroup +(A, B)"},{"path":"https://kuadrat.github.io/growR/reference/plus-.FunctionalGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Addition of two functional groups — +.FunctionalGroup","text":"First functional group. B Second functional group.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plus-.FunctionalGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Addition of two functional groups — +.FunctionalGroup","text":"C FunctionalGroup object value sum respective values B.","code":""},{"path":"https://kuadrat.github.io/growR/reference/plus-.FunctionalGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Addition of two functional groups — +.FunctionalGroup","text":"","code":"fg1 = FunctionalGroup$new() fg2 = FunctionalGroup$new(SLA = 0.02) fg1 + fg2 #> <FunctionalGroup> #>   Public: #>     BDDR: 300 #>     BDDV: 1000 #>     BDGR: 600 #>     BDGV: 1700 #>     LLS: 1000 #>     SLA: 0.053 #>     ST1: 1200 #>     ST2: 2400 #>     clone: function (deep = FALSE)  #>     fg_parameter_names: SLA pcLAM ST1 ST2 maxSEA minSEA LLS maxOMDGV minOMDGV ma ... #>     get_parameters: function ()  #>     get_parameters_ordered: function ()  #>     initialize: function (...)  #>     maxOMDGR: 1.8 #>     maxOMDGV: 1.8 #>     maxSEA: 2.4 #>     minOMDGR: 1.3 #>     minOMDGV: 1.5 #>     minSEA: 1.6 #>     pcLAM: 1.36 #>     set_parameters: function (...)  #>     set_parameters_ordered: function (ordered_parameter_values)"},{"path":"https://kuadrat.github.io/growR/reference/posieux_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Weather Data — posieux_weather","title":"Example Weather Data — posieux_weather","text":"Datasets containing weather input parameters used growR. data made available plain text files package automatically found input directory created setup_directory() include_examples option set TRUE (default).","code":""},{"path":"https://kuadrat.github.io/growR/reference/posieux_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Weather Data — posieux_weather","text":"","code":"posieux_weather"},{"path":"https://kuadrat.github.io/growR/reference/posieux_weather.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Weather Data — posieux_weather","text":"data.frame 3652 rows 10 variables: year Year integer DOY Day year integer Ta Average temperature day degree Celsius Tmin Minimum temperature day degree Celsius Tmax Maximum temperature day degree Celsius precip Daily precipitation mm rSSD Relative sunshine duration percent SRad Sun irradiance J / s / m^2. can converted photosynthetically active radiation (PAR) MJ / m^2 : PAR = SRad * 0.47 * 24 * 60 * 60 / 1e6 ET0 Evapotranspiration mm. snow Precipitation form snow mm","code":""},{"path":"https://kuadrat.github.io/growR/reference/posieux_weather.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Weather Data — posieux_weather","text":"use growR, WeatherData object created plain text file. Therefore, dataset provided convenient inspection. order run growR, use plain text files provided package. Use system.file(\"extdata\", package = \"growR\") locate . snow column actually used growR rather calculated precipitation temperatures WeatherData$read_weather(). Likewise, rSSD column deprecated, currently unused kept backwards compatibility.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/read_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation run configurations from file — read_config","title":"Read simulation run configurations from file — read_config","text":"format configuration file expected contain 6 space-separated columns representing, order: site_name Name simulated site. used, example, output file created. run_name Name simulation run. Used differentiate different runs site. Can - indicate particular name, case nothing appended resulting output file. year(s) Specification years simulated. Either single number sequence R's : notation, .e. 2013:2022 indicate years 2013 (including) 2022. param_file Filename (full path) parameter file use. file assumed located input_dir (confer documentation parameter). weather_file Filename (full path) weather file. See also param_file. management_file Filename (full path) management file. See also param_file. Can set high, middle, low - management data used autocut routine shall employed simulate cutting events. Rows starting # skipped.","code":""},{"path":"https://kuadrat.github.io/growR/reference/read_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation run configurations from file — read_config","text":"","code":"read_config(config_file, input_dir = NULL)"},{"path":"https://kuadrat.github.io/growR/reference/read_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation run configurations from file — read_config","text":"config_file Path configuration file read. input_dir Path directory input files located. Defaults getOptions(\"growR.input_dir\", default = file.path(\"input\")).","code":""},{"path":"https://kuadrat.github.io/growR/reference/read_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read simulation run configurations from file — read_config","text":"list ModvegeEnvironment instances corresponding configurations order appear config_file.","code":""},{"path":"https://kuadrat.github.io/growR/reference/read_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read simulation run configurations from file — read_config","text":"","code":"# First, we set up the expected directory structure in a temporary place tmp = file.path(tempdir(), \"test-read_config\") dir.create(tmp)  # We need `force = TRUE` here in order to make the example work in  # non-interactive settings. setup_directory(root = tmp, include_examples = TRUE, force = TRUE) #> [INFO]Initialized directory structure in `/tmp/RtmpUKZ9jM/test-read_config`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_weather.txt` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_parameters.csv` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management1.txt` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management2.txt` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_weather.txt` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_parameters.csv` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management1.txt` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management2.txt` to `/tmp/RtmpUKZ9jM/test-read_config/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux1.csv` to `/tmp/RtmpUKZ9jM/test-read_config/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux2.csv` to `/tmp/RtmpUKZ9jM/test-read_config/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens1.csv` to `/tmp/RtmpUKZ9jM/test-read_config/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens2.csv` to `/tmp/RtmpUKZ9jM/test-read_config/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/example_config.txt` to `/tmp/RtmpUKZ9jM/test-read_config`. #> [INFO]Copied example files to respective directories.  # Now we can test `read_config`. read_config(file.path(tmp, \"example_config.txt\"),             input_dir = file.path(tmp, \"input\")) #> [[1]] #> <ModvegeEnvironment> #>   Public: #>     clone: function (deep = FALSE)  #>     get_environment_for_year: function (year)  #>     initialize: function (site_name, run_name = \"-\", years = NULL, param_file = \"-\",  #>     input_dir: /tmp/RtmpUKZ9jM/test-read_config/input #>     load_inputs: function ()  #>     make_filename_for_run: function (run_name)  #>     management: ManagementData, R6 #>     management_file: sorens_management1.txt #>     param_file: sorens_parameters.csv #>     parameters: ModvegeParameters, R6 #>     run_name: - #>     run_name_in_filename:  #>     set_run_name: function (run_name)  #>     site_name: sorens1 #>     weather: WeatherData, R6 #>     weather_file: sorens_weather.txt #>     years: 2013 2014 2015 #>  #> [[2]] #> <ModvegeEnvironment> #>   Public: #>     clone: function (deep = FALSE)  #>     get_environment_for_year: function (year)  #>     initialize: function (site_name, run_name = \"-\", years = NULL, param_file = \"-\",  #>     input_dir: /tmp/RtmpUKZ9jM/test-read_config/input #>     load_inputs: function ()  #>     make_filename_for_run: function (run_name)  #>     management: ManagementData, R6 #>     management_file: posieux_management1.txt #>     param_file: posieux_parameters.csv #>     parameters: ModvegeParameters, R6 #>     run_name: - #>     run_name_in_filename:  #>     set_run_name: function (run_name)  #>     site_name: posieux1 #>     weather: WeatherData, R6 #>     weather_file: posieux_weather.txt #>     years: 2013 2014 2015 #>"},{"path":"https://kuadrat.github.io/growR/reference/run_parameter_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Scan — run_parameter_scan","title":"Parameter Scan — run_parameter_scan","text":"Run ModVege different sets parameters.","code":""},{"path":"https://kuadrat.github.io/growR/reference/run_parameter_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Scan — run_parameter_scan","text":"","code":"run_parameter_scan(environment, param_values, force = FALSE, outfilename = \"\")"},{"path":"https://kuadrat.github.io/growR/reference/run_parameter_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Scan — run_parameter_scan","text":"environment Either ModvegeEnvironment instance site, management weather inputs expected ModvegeSite$run() string representing name config file read order generate ModvegeEnvironment read_config(). Note , latter case, first found configuration used one valid uncommented lines config file. param_values named list key stands ModVege parameter, .e. member ModvegeParameters$parameter_names. list entry vector containing allowed values respective parameter. possible allowed combinations parameter values generated fed ModVege run. force Boolean. default (force = FALSE), function first counts number parameter combinations need run asks user, proceed. can suppressed letting force  = TRUE. outfilename String. nonempty, results stored rds file filename outfilename using saveRDS() function.","code":""},{"path":"https://kuadrat.github.io/growR/reference/run_parameter_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Scan — run_parameter_scan","text":"results list containing entry supplied parameter set param_values. entry list containing following keys: params parameter set used run ModVege entry. data list containing simulated year ModvegeSite object run respective year therefore carries respective results.","code":""},{"path":"https://kuadrat.github.io/growR/reference/run_parameter_scan.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parameter Scan — run_parameter_scan","text":"Special care taken creation param_values argument. possible choose values allow valid combination. Confer create_combinations().","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/run_parameter_scan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Scan — run_parameter_scan","text":"","code":"env = create_example_environment() # We're creating a trivial list of parameters to explore here in order to  # prevent the example from requiring a long time to execute. See  # [create_combinations()] for more realistic uses of param_values. param_values = list(w_FGA = c(0, 1), w_FGB = c(0, 1)) run_parameter_scan(env, param_values, force = TRUE) #> [INFO]Parameter combination 1 out of 2. #> [INFO]Starting run 1 out of 1. #> [INFO][Run 1/1]Simulating year 2013 (1/4) #> [INFO][Run 1/1]Simulating year 2014 (2/4) #> [INFO][Run 1/1]Simulating year 2015 (3/4) #> [INFO][Run 1/1]Simulating year 2016 (4/4) #> [INFO]All runs completed. #> [INFO]Parameter combination 2 out of 2. #> [INFO]Starting run 1 out of 1. #> [INFO][Run 1/1]Simulating year 2013 (1/4) #> [INFO][Run 1/1]Simulating year 2014 (2/4) #> [INFO][Run 1/1]Simulating year 2015 (3/4) #> [INFO][Run 1/1]Simulating year 2016 (4/4) #> [INFO]All runs completed. #> [INFO]Completed parameter scan. #> [INFO]Time used: 1.31713128089905 #> [[1]] #> [[1]]$params #> w_FGA w_FGB  #>     0     1  #>  #> [[1]]$data #> [[1]]$data[[1]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.457223659360304 0.492747302067495 0.480105581585783 0. ... #>     AgeDR: 502.84 504.12 504.79 508.13 513.74 517.69 519.45 519.45  ... #>     AgeDRp: 2656.25685098306 #>     AgeDV: 502.84 504.12 504.79 508.13 513.74 517.69 519.45 519.45  ... #>     AgeDVp: 360.163681721118 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2535.539652403 #>     AgeGV: 102.84 104.12 104.79 108.13 113.74 117.69 119.45 119.45  ... #>     AgeGVp: 418.243498780562 #>     BM: 748.2108 747.408871296 746.990160669531 744.905587078854 ... #>     BMDR: 29.9148 29.876509056 29.8564917949325 29.7567711123374 2 ... #>     BMDRp: 1.62661938055988 #>     BMDV: 298.296 297.53236224 297.133668874598 295.148815966516 2 ... #>     BMDVp: 206.152935636412 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 459.313491565678 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0.122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0.122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     LAIGV: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     OMD: 0.678955476183984 0.678933962545162 0.678922359910314 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.861435 0.860955 0.86070375 0.85945125 0.8573475 0.8558 ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.861435 0.860955 0.86070375 0.85945125 0.8573475 0.8558 ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.84 4.12 4.79 8.13 13.74 17.69 19.45 19.45 19.45 20.56  ... #>     STp: 3324.38 #>     WR: 130 129.509787758099 129.068276627822 128.690056233788 1 ... #>     WRp: 129.627111149557 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 6190.27925281306 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 106 134 162 190 218 246 274 302 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 95 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2013 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[1]]$data[[2]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.572832822953001 0.489068593905107 0.497218890323204 0. ... #>     AgeDR: 502.07 505.44 508.61 512.35 515.58 517.36 524.65 532.15  ... #>     AgeDRp: 2869.54048650331 #>     AgeDV: 502.07 505.44 508.61 512.35 515.58 517.36 524.65 532.15  ... #>     AgeDVp: 423.673205672842 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2857.13439696621 #>     AgeGV: 102.07 105.44 108.61 112.35 115.58 117.36 124.65 132.15  ... #>     AgeGVp: 485.543080985033 #>     BM: 748.6959 746.581380357 744.605437724945 742.288625723843 ... #>     BMDR: 29.9379 29.837009277 29.7424259575919 29.6311892845105 2 ... #>     BMDRp: 1.77999238727987 #>     BMDV: 298.758 296.74437108 294.863011767353 292.657436439333 2 ... #>     BMDVp: 178.847655871668 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 625.73707954185 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0.458 0.5 0.454 0.184 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0.458 0.5 0.454 0.184 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     LAIGV: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     OMD: 0.678967568808644 0.678911882927523 0.678855169555004 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.86172375 0.86046 0.85927125 0.85786875 0.8566575 0.855 ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.86172375 0.86046 0.85927125 0.85786875 0.8566575 0.855 ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.07 5.44 8.61 12.35 15.58 17.36 24.65 32.15 39.42 45.34 ... #>     STp: 3719.5 #>     WR: 129.946718652693 130 130 130 130 129.365338865 128.74452 ... #>     WRp: 127.0196850683 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 8625.14290032374 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 91 119 147 175 203 231 259 287 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 64 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2014 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[1]]$data[[3]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0.00984744012611478 #>     ABSDV: 1.68970646494988 #>     AET: 0.19920064755 0.199001770202729 0.592140498337971 0.8132 ... #>     AgeDR: 500 500 504.91 509.88 509.88 509.88 510.27 515.11 522.86 ... #>     AgeDRp: 2965.34584618241 #>     AgeDV: 500 500 504.91 509.88 509.88 509.88 510.27 515.11 522.86 ... #>     AgeDVp: 367.362080229803 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2914.28329749312 #>     AgeGV: 100 100 104.91 109.88 109.88 109.88 110.27 115.11 122.86 ... #>     AgeGVp: 396.644510839453 #>     BM: 750 750 746.9067 743.805615321 743.805615321 743.8056153 ... #>     BMDR: 30 30 29.8527 29.704332081 29.704332081 29.704332081 29. ... #>     BMDRp: 1.55200001987625 #>     BMDV: 300 300 297.054 294.10128324 294.10128324 294.10128324 2 ... #>     BMDVp: 199.728896566179 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 483.654227309786 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0 0 0.55 1 0 0 0.084 0.224 0 0 0 0 0 0 0 0 0 ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0.55 1 0 0 0.084 0.224 0 0 0 0 0 0 0 0 0 ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     LAIGV: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     OMD: 0.679 0.679 0.678922889565725 0.678834899723759 0.678834 ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.8625 0.8625 0.86065875 0.858795 0.858795 0.858795 0.85 ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.8625 0.8625 0.86065875 0.858795 0.858795 0.858795 0.85 ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 0 0 4.91 9.88 9.88 9.88 10.27 15.11 22.86 35.36 40.23 42 ... #>     STp: 3711.49 #>     WR: 129.800799840891 129.603644952911 130 129.709778732205 1 ... #>     WRp: 123.422768956574 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 6590.8806478112 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 90 118 146 174 202 230 258 286 314 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 75 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2015 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[1]]$data[[4]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.272542889414208 0.224447085399936 0.288574824085632 0. ... #>     AgeDR: 503.99 507.78 511.31 516.04 520.55 523.86 527.42 531.52  ... #>     AgeDRp: 2869.83665126759 #>     AgeDV: 503.99 507.78 511.31 516.04 520.55 523.86 527.42 531.52  ... #>     AgeDVp: 395.58725136375 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2715.92320594534 #>     AgeGV: 103.99 107.78 111.31 116.04 120.55 123.86 127.42 131.52  ... #>     AgeGVp: 439.724338709058 #>     BM: 747.4863 745.117200183 742.926950449138 740.012362644197 ... #>     BMDR: 29.8803 29.767053663 29.6619759635696 29.5216748172619 2 ... #>     BMDRp: 1.06812089351777 #>     BMDV: 297.606 295.35014652 293.264974485569 290.490687826935 2 ... #>     BMDVp: 192.642324000804 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 518.921428537923 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0 0 0 0 0.148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0 0 0.148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4. ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     LAIGV: 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0.714 0. ... #>     OMD: 0.678937386544743 0.678871776513771 0.678805235964392 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.86100375 0.8595825 0.85825875 0.856485 0.85479375 0.85 ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.86100375 0.8595825 0.85825875 0.856485 0.85479375 0.85 ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40.935 ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 3.99 7.78 11.31 16.04 20.55 23.86 27.42 31.52 36.14 40.8 ... #>     STp: 3500.48 #>     WR: 130 130 130 130 130 129.790711380507 130 130 130 130 130 ... #>     WRp: 111.817550947756 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7428.39973800315 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 89 117 145 173 201 229 257 285 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 26 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2016 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #>  #>  #> [[2]] #> [[2]]$params #> w_FGA w_FGB  #>     1     0  #>  #> [[2]]$data #> [[2]]$data[[1]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.457223659360304 0.492747302067495 0.480257065079617 0. ... #>     AgeDR: 502.84 504.12 504.79 508.13 513.74 517.69 519.45 519.45  ... #>     AgeDRp: 2610.42758488522 #>     AgeDV: 502.84 504.12 504.79 508.13 513.74 517.69 519.45 519.45  ... #>     AgeDVp: 291.239024741609 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2576.82247323826 #>     AgeGV: 102.84 104.12 104.79 108.13 113.74 117.69 119.45 119.45  ... #>     AgeGVp: 334.900531395507 #>     BM: 747.3588 746.178324096 745.562740186702 742.500042895222 ... #>     BMDR: 29.9148 29.876509056 29.8564917949325 29.7567711123374 2 ... #>     BMDRp: 2.58908004802842 #>     BMDV: 297.444 296.30181504 295.70624839177 292.743271782884 28 ... #>     BMDVp: 224.509713889781 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 475.769909548837 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0.122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0.122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     LAIGV: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     OMD: 0.683551033318936 0.68370694231633 0.683788018117167 0.6 ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.869148 0.868764 0.868563 0.867561 0.865878 0.864693 0. ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.869148 0.868764 0.868563 0.867561 0.865878 0.864693 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.84 4.12 4.79 8.13 13.74 17.69 19.45 19.45 19.45 20.56  ... #>     STp: 3324.38 #>     WR: 130 129.509787758099 129.068125144328 128.689534980198 1 ... #>     WRp: 129.627111149557 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7344.92531937025 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 106 134 162 190 218 246 274 302 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 95 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2013 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[2]]$data[[2]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.572832822953001 0.489085329341227 0.497218890323204 0. ... #>     AgeDR: 502.07 505.44 508.61 512.35 515.58 517.36 524.65 532.15  ... #>     AgeDRp: 3565.92033154979 #>     AgeDV: 502.07 505.44 508.61 512.35 515.58 517.36 524.65 532.15  ... #>     AgeDVp: 345.93062865456 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 3090.12454873003 #>     AgeGV: 102.07 105.44 108.61 112.35 115.58 117.36 124.65 132.15  ... #>     AgeGVp: 417.770431170538 #>     BM: 748.0749 744.959844207 742.058642727408 738.667618102169 ... #>     BMDR: 29.9379 29.837009277 29.7424259575919 29.6311892845105 2 ... #>     BMDRp: 0.24682211890885 #>     BMDV: 298.137 295.12283493 292.316216769816 289.036428817658 2 ... #>     BMDVp: 204.423245844888 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 734.455424879952 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0.458 0.5 0.454 0.184 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0.458 0.5 0.454 0.184 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     LAIGV: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     OMD: 0.683455613869681 0.683868591563627 0.684251053344278 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.869379 0.868368 0.867417 0.866295 0.865326 0.864792 0. ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.869379 0.868368 0.867417 0.866295 0.865326 0.864792 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 2.07 5.44 8.61 12.35 15.58 17.36 24.65 32.15 39.42 45.34 ... #>     STp: 3719.5 #>     WR: 129.946718652693 130 130 130 130 129.365338865 128.74421 ... #>     WRp: 127.007540797651 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 11994.4483863024 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 91 119 147 175 203 231 259 287 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 64 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2014 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[2]]$data[[3]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0.00977550265766102 #>     ABSDV: 1.885032651351 #>     AET: 0.19920064755 0.199027247684387 0.592291422500415 0.8132 ... #>     AgeDR: 500 500 504.91 509.88 509.88 509.88 510.27 515.11 522.86 ... #>     AgeDRp: 2949.90378303938 #>     AgeDV: 500 500 504.91 509.88 509.88 509.88 510.27 515.11 522.86 ... #>     AgeDVp: 300.918299167648 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2955.57629215679 #>     AgeGV: 100 100 104.91 109.88 109.88 109.88 110.27 115.11 122.86 ... #>     AgeGVp: 319.174882513544 #>     BM: 750 750 745.4337 740.878219371 740.878219371 740.8782193 ... #>     BMDR: 30 30 29.8527 29.704332081 29.704332081 29.704332081 29. ... #>     BMDRp: 1.54066235739338 #>     BMDV: 300 300 295.581 291.17388729 291.17388729 291.17388729 2 ... #>     BMDVp: 222.817098268439 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 518.292866942952 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0 0 0.55 1 0 0 0.084 0.224 0 0 0 0 0 0 0 0 0 ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0.55 1 0 0 0.084 0.224 0 0 0 0 0 0 0 0 0 ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     LAIGV: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     OMD: 0.6832 0.6832 0.683808459424359 0.684410863830488 0.6844 ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.87 0.87 0.868527 0.867036 0.867036 0.867036 0.866919 0 ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.87 0.87 0.868527 0.867036 0.867036 0.867036 0.866919 0 ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 0 0 4.91 9.88 9.88 9.88 10.27 15.11 22.86 35.36 40.23 42 ... #>     STp: 3711.49 #>     WR: 129.800799840891 129.603619475429 130 129.709778732205 1 ... #>     WRp: 115.804802981945 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 7654.69050450178 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 90 118 146 174 202 230 258 286 314 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 75 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2015 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #> [[2]]$data[[4]] #> <ModvegeSite> #>   Public: #>     ABSDR: 0 #>     ABSDV: 0 #>     AET: 0.272542889414208 0.224447085399936 0.288574824085632 0. ... #>     AgeDR: 503.99 507.78 511.31 516.04 520.55 523.86 527.42 531.52  ... #>     AgeDRp: 2797.3160776649 #>     AgeDV: 503.99 507.78 511.31 516.04 520.55 523.86 527.42 531.52  ... #>     AgeDVp: 320.902844955838 #>     AgeGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     AgeGRp: 2770.13881329056 #>     AgeGV: 103.99 107.78 111.31 116.04 120.55 123.86 127.42 131.52  ... #>     AgeGVp: 363.739785408334 #>     BM: 746.2893 742.805883333 739.597524427364 735.343037848355 ... #>     BMDR: 29.8803 29.767053663 29.6619759635696 29.5216748172619 2 ... #>     BMDRp: 1.94108326472162 #>     BMDV: 296.409 293.03882967 289.935548463795 285.821363031093 2 ... #>     BMDVp: 217.757040002577 #>     BMG: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGR: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     BMGRp: 150 #>     BMGV: 420 420 420 420 420 420 420 420 420 420 420 420 420 420  ... #>     BMGVp: 567.855133520762 #>     BM_after_cut: 900 #>     ENV: 0 0 0 0 0 0 0 0 0 0 0.148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfPAR: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     ENVfT: 0 0 0 0 0 0 0 0 0 0 0.148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     ENVfW: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ... #>     GRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5. ... #>     GROGR: 0 #>     GROGV: 0 #>     LAI: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     LAIGV: 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248 0.94248  ... #>     OMD: 0.683693883859785 0.684154536493993 0.684576016646551 0. ... #>     OMDDR: NULL #>     OMDDV: NULL #>     OMDG: 0.868803 0.867666 0.866607 0.865188 0.863835 0.862842 0. ... #>     OMDGR: 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9  ... #>     OMDGV: 0.868803 0.867666 0.866607 0.865188 0.863835 0.862842 0. ... #>     PGRO: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50.741 ... #>     REP: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     SENGR: 0 #>     SENGV: 0 #>     ST: 3.99 7.78 11.31 16.04 20.55 23.86 27.42 31.52 36.14 40.8 ... #>     STp: 3500.48 #>     WR: 130 130 130 130 130 129.790711380507 130 130 130 130 130 ... #>     WRp: 111.634545336687 #>     cBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     cBMp: 8860.71069775476 #>     clone: function (deep = FALSE)  #>     cut_DOYs: 89 117 145 173 201 229 257 285 #>     cut_delays: 0 #>     cut_during_growth_preriod: TRUE #>     cut_height: 0.05 #>     dBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     days_per_year: 365 #>     determine_cut: function (DOY)  #>     determine_cut_automatically: function (DOY)  #>     determine_cut_from_input: function (DOY)  #>     dry_days_after_cut: 2 #>     dry_days_before_cut: 1 #>     dry_precipitation_limit: 1 #>     dry_window: NULL #>     end_of_cutting_season: NULL #>     get_management: function ()  #>     get_target_biomass: function (DOY, intensity = \"high\")  #>     get_weather: function ()  #>     hvBM: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ... #>     initialize: function (parameters, site_name = \"-\", run_name = \"-\")  #>     j_start_of_growing_season: 26 #>     last_DOY_for_initial_cut: 150 #>     management: list #>     max_cut_delay: 5 #>     max_cut_period: 55 #>     n_state_variables: 31 #>     parameters: ModvegeParameters, R6 #>     plot: function (...)  #>     plot_bm: function (smooth_interval = 28, ...)  #>     plot_growth: function (...)  #>     plot_limitations: function (...)  #>     plot_var: function (var, ...)  #>     plot_water: function (...)  #>     run: function (year, weather, management)  #>     run_name: - #>     set_parameters: function (params)  #>     site_name: posieux1 #>     state_variable_names: AgeGV AgeGR AgeDV AgeDR BMGV BMGR BMDV BMDR OMDGV OMDGR  ... #>     stubble_heigt: 0.05 #>     target_biomass: NULL #>     time_step: 1 #>     version: package_version, numeric_version #>     weather: list #>     write_output: function (filename, force = FALSE)  #>     year: 2016 #>   Private: #>     REP_ON: 0.653846153846154 #>     apply_cuts: function ()  #>     calculate_ageing: function ()  #>     calculate_digestibility: function ()  #>     calculate_growth: function ()  #>     carry_over_from_last_day: function ()  #>     check_if_simulation_has_run: function ()  #>     current_DOY: 365 #>     get_start_of_growing_season: function (critical_temperature = 5, min_window_temperature = 6,  #>     initialize_state_variables: function ()  #>     make_header: function ()  #>     update_biomass: function ()  #>     vars_to_exclude: OMDDV OMDDR #>     ylabels: list #>  #>  #>"},{"path":"https://kuadrat.github.io/growR/reference/set_growR_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Set verbosity of growR output. — set_growR_verbosity","title":"Set verbosity of growR output. — set_growR_verbosity","text":"Set verbosity growR output.","code":""},{"path":"https://kuadrat.github.io/growR/reference/set_growR_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set verbosity of growR output. — set_growR_verbosity","text":"","code":"set_growR_verbosity(level = 3)"},{"path":"https://kuadrat.github.io/growR/reference/set_growR_verbosity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set verbosity of growR output. — set_growR_verbosity","text":"level Integer representing one following levels: 1: ERROR, 2: WARNING, 3: INFO, 4: DEBUG, 5: TRACE Messages level higher specified level suppressed. words, higher values level lead output vice versa.","code":""},{"path":"https://kuadrat.github.io/growR/reference/set_growR_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set verbosity of growR output. — set_growR_verbosity","text":"None Sets option ``\"growR.verbosity\"`.","code":""},{"path":"https://kuadrat.github.io/growR/reference/set_growR_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set verbosity of growR output. — set_growR_verbosity","text":"","code":"# At level 3, only one of the three following messages are printed. set_growR_verbosity(3) logger(\"Message on level 5.\", level = 5) #> NULL logger(\"Message on level 4.\", level = 4) #> NULL logger(\"Message on level 3.\", level = 3) #> [INFO]Message on level 3. # At level 5, all three are printed. set_growR_verbosity(5) logger(\"Message on level 5.\", level = 5) #> [TRACE]Message on level 5. logger(\"Message on level 4.\", level = 4) #> [DEBUG]Message on level 4. logger(\"Message on level 3.\", level = 3) #> [INFO]Message on level 3. # Reset to default. set_growR_verbosity()"},{"path":"https://kuadrat.github.io/growR/reference/setup_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize growR directory structure — setup_directory","title":"Initialize growR directory structure — setup_directory","text":"Creates directories growR default looks deposits certain files. Also, optionally populates directories example files, useful familiarize oneself growR simulation framework.","code":""},{"path":"https://kuadrat.github.io/growR/reference/setup_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize growR directory structure — setup_directory","text":"","code":"setup_directory(root, include_examples = TRUE, force = FALSE)"},{"path":"https://kuadrat.github.io/growR/reference/setup_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize growR directory structure — setup_directory","text":"root Path directory initialize. include_examples TRUE (default), include example data input parameters appropriate directories. force boolean TRUE, user asked permission write filesystem.","code":""},{"path":"https://kuadrat.github.io/growR/reference/setup_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize growR directory structure — setup_directory","text":"","code":"# Prepare a temporary directory to write to tmp = file.path(tempdir(), \"test-setup_directory\") dir.create(tmp)  # We need `force = TRUE` here in order to make the example work in  # non-interactive settings. setup_directory(root = tmp, include_examples = FALSE, force = TRUE) #> [INFO]Initialized directory structure in `/tmp/RtmpUKZ9jM/test-setup_directory`. #> [1] 0  # The `input`, `output` and `data` directories are now present. list.files(tmp) #> [1] \"data\"   \"input\"  \"output\"  # Warnings are issued if directories are already present. Example files  # are still copied and potentially overwritten. setup_directory(root = tmp, include_examples = TRUE, force = TRUE) #> Warning: Directory `/tmp/RtmpUKZ9jM/test-setup_directory` is not empty. #> Warning: Directory `/tmp/RtmpUKZ9jM/test-setup_directory/input/` already exists. #> Warning: Directory `/tmp/RtmpUKZ9jM/test-setup_directory/output/` already exists. #> Warning: Directory `/tmp/RtmpUKZ9jM/test-setup_directory/data/` already exists. #> [INFO]Initialized directory structure in `/tmp/RtmpUKZ9jM/test-setup_directory`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_weather.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_parameters.csv` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management1.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux_management2.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_weather.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_parameters.csv` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management1.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens_management2.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory/input/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux1.csv` to `/tmp/RtmpUKZ9jM/test-setup_directory/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/posieux2.csv` to `/tmp/RtmpUKZ9jM/test-setup_directory/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens1.csv` to `/tmp/RtmpUKZ9jM/test-setup_directory/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/sorens2.csv` to `/tmp/RtmpUKZ9jM/test-setup_directory/data/`. #> [INFO]Copying `/home/runner/work/_temp/Library/growR/extdata/example_config.txt` to `/tmp/RtmpUKZ9jM/test-setup_directory`. #> [INFO]Copied example files to respective directories.  # Example files are now present list.files(tmp, recursive = TRUE) #>  [1] \"data/posieux1.csv\"             \"data/posieux2.csv\"             #>  [3] \"data/sorens1.csv\"              \"data/sorens2.csv\"              #>  [5] \"example_config.txt\"            \"input/posieux_management1.txt\" #>  [7] \"input/posieux_management2.txt\" \"input/posieux_parameters.csv\"  #>  [9] \"input/posieux_weather.txt\"     \"input/sorens_management1.txt\"  #> [11] \"input/sorens_management2.txt\"  \"input/sorens_parameters.csv\"   #> [13] \"input/sorens_weather.txt\"       # End of the example. The following code is for cleaning up. unlink(tmp, recursive = TRUE)"},{"path":"https://kuadrat.github.io/growR/reference/times-.FunctionalGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Scalar multiplication of functional group (order matters: scalar * FG) — *.FunctionalGroup","title":"Scalar multiplication of functional group (order matters: scalar * FG) — *.FunctionalGroup","text":"Scalar multiplication functional group (order matters: scalar * FG)","code":""},{"path":"https://kuadrat.github.io/growR/reference/times-.FunctionalGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scalar multiplication of functional group (order matters: scalar * FG) — *.FunctionalGroup","text":"","code":"# S3 method for FunctionalGroup *(scalar, fg)"},{"path":"https://kuadrat.github.io/growR/reference/times-.FunctionalGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scalar multiplication of functional group (order matters: scalar * FG) — *.FunctionalGroup","text":"scalar float multiply FG parameters . fg Functional group whose parameters multiplied.","code":""},{"path":"https://kuadrat.github.io/growR/reference/times-.FunctionalGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scalar multiplication of functional group (order matters: scalar * FG) — *.FunctionalGroup","text":"C FunctionalGroup object values multiplied scalar.","code":""},{"path":"https://kuadrat.github.io/growR/reference/times-.FunctionalGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scalar multiplication of functional group (order matters: scalar * FG) — *.FunctionalGroup","text":"","code":"fg = FunctionalGroup$new() 3.1 * fg #> <FunctionalGroup> #>   Public: #>     BDDR: 465 #>     BDDV: 1550 #>     BDGR: 930 #>     BDGV: 2635 #>     LLS: 1550 #>     SLA: 0.1023 #>     ST1: 1860 #>     ST2: 3720 #>     clone: function (deep = FALSE)  #>     fg_parameter_names: SLA pcLAM ST1 ST2 maxSEA minSEA LLS maxOMDGV minOMDGV ma ... #>     get_parameters: function ()  #>     get_parameters_ordered: function ()  #>     initialize: function (...)  #>     maxOMDGR: 2.79 #>     maxOMDGV: 2.79 #>     maxSEA: 3.72 #>     minOMDGR: 2.015 #>     minOMDGV: 2.325 #>     minSEA: 2.48 #>     pcLAM: 2.108 #>     set_parameters: function (...)  #>     set_parameters_ordered: function (ordered_parameter_values)  0 * fg #> <FunctionalGroup> #>   Public: #>     BDDR: 0 #>     BDDV: 0 #>     BDGR: 0 #>     BDGV: 0 #>     LLS: 0 #>     SLA: 0 #>     ST1: 0 #>     ST2: 0 #>     clone: function (deep = FALSE)  #>     fg_parameter_names: SLA pcLAM ST1 ST2 maxSEA minSEA LLS maxOMDGV minOMDGV ma ... #>     get_parameters: function ()  #>     get_parameters_ordered: function ()  #>     initialize: function (...)  #>     maxOMDGR: 0 #>     maxOMDGV: 0 #>     maxSEA: 0 #>     minOMDGR: 0 #>     minOMDGV: 0 #>     minSEA: 0 #>     pcLAM: 0 #>     set_parameters: function (...)  #>     set_parameters_ordered: function (ordered_parameter_values)"},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":null,"dir":"Reference","previous_headings":"","what":"Willmott Index — willmott","title":"Willmott Index — willmott","text":"Willmott's index model performance described Willmott (2012).","code":""},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Willmott Index — willmott","text":"","code":"willmott(predicted, observed, ...)"},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Willmott Index — willmott","text":"predicted Vector containing predictions y. observed Vector containing observations z. ... Scaling factor c denominator Willmott index. originally proposed value 2 fine.","code":""},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Willmott Index — willmott","text":"willmott Value -1 1","code":""},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Willmott Index — willmott","text":"index takes values -1 1, values closer 1 generally indicating better model performance. Values close -1 can either mean model predictions differ strongly observation, observations show small variance ().","code":""},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Willmott Index — willmott","text":"Willmott CJ, Robeson SM, Matsuura K (2012). “Refined Index Model Performance.” International Journal Climatology, 32(13), 2088--2094. ISSN 1097-0088, doi:10.1002/joc.2419 , https://rmets.onlinelibrary.wiley.com/doi/abs/10.1002/joc.2419.","code":""},{"path":[]},{"path":"https://kuadrat.github.io/growR/reference/willmott.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Willmott Index — willmott","text":"","code":"predicted = c(21.5, 22.2, 19.1) observed = c(20, 20, 20) # The Willmott index \"fails\" in this case, as the variance in the  # observation is 0. willmott(predicted, observed) #> [1] -1  # Try with more realistic observations observed = c(20.5, 19.5, 20.0) willmott(predicted, observed) #> [1] -0.5652174"},{"path":"https://kuadrat.github.io/growR/reference/yield_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for expected yields in Switzerland — yield_parameters","title":"Parameters for expected yields in Switzerland — yield_parameters","text":"dataset contains parameters b used model expected gross dry matter yield (t / ha) function altitude (m..s.l.) yield = + b * altitude.","code":""},{"path":"https://kuadrat.github.io/growR/reference/yield_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for expected yields in Switzerland — yield_parameters","text":"","code":"yield_parameters"},{"path":"https://kuadrat.github.io/growR/reference/yield_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parameters for expected yields in Switzerland — yield_parameters","text":"data.frame 4 rows 3 variables: intensity Management intensity Offset t / ha b Slope b t / ha / m","code":""},{"path":"https://kuadrat.github.io/growR/reference/yield_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for expected yields in Switzerland — yield_parameters","text":"Lookup Table expected yield functions height management intensity table 1a Olivier Huguenin et al.","code":""},{"path":"https://kuadrat.github.io/growR/reference/yield_parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parameters for expected yields in Switzerland — yield_parameters","text":"Huguenin-Elie IEMPSALWK, Jeangros B (2017). “Grundlagen für die Düngung landwirtschaftlicher Kulturen der Schweiz (GRUD), Kapitel 9: Düngung von Grasland.” Agrarforschung Schweiz. https://www.agrarforschungschweiz.ch/2017/06/9-duengung-von-grasland-grud-2017/.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"growr-120","dir":"Changelog","previous_headings":"","what":"growR 1.2.0","title":"growR 1.2.0","text":"CRAN release: 2023-12-14","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"added-1-2-0","dir":"Changelog","previous_headings":"","what":"Added","title":"growR 1.2.0","text":"Green biomass lower bound defined minimum grass height. prevent population completely dying effectively simulates reserves.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"changed-1-2-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"growR 1.2.0","text":"start growing season now determined multicriterial thermal definition described chapter 2.3.1.3 dissertation Andreas Schaumberger: Räumliche Modelle zur Vegetations- und Ertragsdynamik im Wirtschaftsgrünland, 2011, ISBN-13: 978-3-902559-67-8","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"removed-1-2-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"growR 1.2.0","text":"compare.R script fetched setup_directory().","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"growr-110","dir":"Changelog","previous_headings":"","what":"growR 1.1.0","title":"growR 1.1.0","text":"CRAN release: 2023-11-22","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"added-1-1-0","dir":"Changelog","previous_headings":"","what":"Added","title":"growR 1.1.0","text":"Input integrity checking WeatherData ManagementData. PScanPlotter (plot_parameter_scan) now allows select variable display (dBM, cBM cBM_tot). Instances simulation results variable dBM visualized compared experimental data now allow specifying integration window dBM, set match experimental reality. concerns ModvegeSite$plot() analyze_parameter_scan() well compare.R script. S3 dispatch plot method ModvegeSite objects -> plot(mvs) now possible mvs ModvegeSite instance. ParameterData input checking: throws error duplicate input parameter name. Debug utility conveniences browse browse_end. ModvegeSite$plot_XXX functions insights model behaviour, XXX water, limitations, growth plot_var generic variable plotting.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"changed-1-1-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"growR 1.1.0","text":"Input data CSV files now actual CSV files, instead “semicolon-separated value” files. ParameterData now assumes default values parameters. check_parameters now throws error reallyrequired parameters missing. Number days per year now inferred weather data instead hardcoded 365, allowing simulations run years incomplete data. Crop coefficient (parameters$crop_coefficient) senescence capping now model parameters instead hardcoded.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"fixed-1-1-0","dir":"Changelog","previous_headings":"","what":"Fixed","title":"growR 1.1.0","text":"autocut: get_annual_gross_yield incorrectly hardcoded return 1. ParameterData$set_parameters now updates initial condition values, applicable.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"removed-1-1-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"growR 1.1.0","text":"Removed superfluous weather inputs. Removed automatic temperature correction. Redundant argument store_results growR_run_loop. SEA symmetrization around 1 enforced anymore.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"growr-100","dir":"Changelog","previous_headings":"","what":"growR 1.0.0","title":"growR 1.0.0","text":"CRAN release: 2023-10-16 Initial CRAN submission.","code":""},{"path":"https://kuadrat.github.io/growR/news/index.html","id":"growr-001","dir":"Changelog","previous_headings":"","what":"growR 0.0.1","title":"growR 0.0.1","text":"Renaming rmodvege growR.","code":""}]
